=================================================================================
==================== Terminology: don't call them "thingies". ===================
=================================================================================

====================== Common lingo in gaming and game dev: =====================

Crash: 
 1. A (SYSTEM) CRASH: 
   . the freezing of the computer. 
 2. AN APPLICATION CRASH: 
   . unexpected exit from or freeze of the application. 
   . the freeze is typically remedied by aborting the app in Task Manager. 
   . possible cause: hardware failure, OS is corrupted, loss of data necessitated 
     by recovery. 

Key binding: 
 . an application-specific keyboard shortcut (e.g., C-p in Emacs). 

IP: 
 . intellectual property 
 . not to be confused with internet protocol 

DLC: 
 . downloadable content 
 * OK, so this is not related to programming, but come on! All gamers and programmers 
   should know this. (I'm sure some of you didn't.) 

=================================================================================

Machine code: 
 - binary code for the hardware, ones and zeros to be used for input and operations. 

Bit: 
 . the smallest unit of measurement of data length and storage size. 
 . can only hold values 0 and 1. 

Byte: 
 . 8 bits. 
 . char = 1B. 

Word: 
 . 16 bits. 
 . A double word is 32-bits. 

Peripheral: 
 - fancy/tech synonym for device. 

Hardware: 
 . IN PROGRAMMING, COLLOQUIAL: 
   + inextricable and fundamental programs for logic components: 
   |
 . GENERAL: all the physical parts of a computer. 
   + the motherboard (a circuit board that is the hub, the nexus of all computing 
     magic thanks to its components). 
   + Components on or attached to the motherboard: CPU, RAM, cards.
 . Other things that are hardware but are less thought of are: 
   + storage devices (HDD and SSD) and the firmware on them. 
   + peripherals: monitor, keyboard, mouse, speakers, etc. 
   + networking devices: routers, hubs, switches, bridges, etc. 
   + computer case 
   + power supply 
   + fans

Firmware: 
 . inextricable fundamental programs, translated and then processed as input 
   for hardware (circuit logic). 
 . interacts with the kernel, allowing it to use 
   the host device's processing power. 
 . ex.: BIOS on ROM, 
 . the program layer between the kernel and the hardware. 
 . typically written in C or C++. 

CPU (central processing unit, a.k.a. the processor): 
 . a board featuring three components, each one performing a core function:
   + ALU - a Unit that receives instructions to perform Arithmetic and Logic 
     operations on binary data. 
   + CU - a Unit that holds decoded instructions as its input to allow for 
     timing and control signals that regulate the functionality of memory, CPU 
     (especially ALU), and I/O. 
   + registers, both special-purpose and general-purpose: 
     > special-purpose: current state registers - stack pointer (SP), program 
       counter (PC), instruction register (IR), etc. 

Runtime: 
 - the period of operation of a computer devoted to input from and output to 
   the user (i.e., follows the boot process). 

===================================== Memory: ===================================

Volatile memory, a.k.a. VRAM: 
 - memory on a chip where all data is erased upon shut-off of the system. 
|
Non-volatile memory, a.k.a. NVRAM: 
 - data is preserved in spite of a shut-off of the system. 
 - ex.: EEPROM, flash, SRAM (battery-backed).

ROM (read-only memory): 
 . memory with BIOS/UEFI instructions and data meant exclusively for the machine. 
 . an entire chip would have to be erased or re-written at the origin. 

EPROM: 
 . FOR LEGACY SYSTEMS 

EEPROM: 
 . FOR LEGACY SYSTEMS 

BIOS: 
 . FOR LEGACY SYSTEMS 
 . 

UEFI: 
 . 

Flash memory: 
 . technology realized with memory chips that would only have parts of them erased 
   or re-written instead of the entire chip. 
 . can be re-programmed multiple times. 
 . includes a memory controller/processor. 

Random-access memory, a.k.a. RAM, a.k.a. memory, a.k.a. system memory: 
 . Comprised of (multi-)byte addresses harbored on chips, RAM is thought of as a canvas 
   workstation for SHORT-TERM data (i.e., while the machine is on). They are like 
   the sensory and reasoning synapses of your computer. Anything that a device ideates 
   and any visual, audial, or other kind of input that it receives is reflected there. 
   When a machine is turned on, the BIOS (Basic Input/Output System residing in 
   the flash memory on the motherboard) commands a copy of the machine's operating 
   system to be slated onto the memory. 
 . RAM chips are located within the DIMM (dual in-line memory module) on the motherboard. 
 . Yes, technically hard drives also have memory, but when software engineers and 
   developers say "memory", they really mean RAM, not what's long-term. 

Buffer: 
 . a small chunk of memory used by the programmer or the device. 

Framebuffer: 
 . where the graphics magic happens: pixels can be set with colors on the screen 
   based on what framebuffer bits are set and how. 
 . on modern systems the address of the framebuffer is likely to be 0xA0000. 

DRAM (dynamic RAM): 
 . slow, low-cost memory used in applications that demand high memory capacity. 
 . still used in PCs and servers. 

Cache: 
 . fast, expensive memory reserved for storing recently/repeatedly accessed data. 
 . this kind of efficient access gives rise to lower latency in performance. 
 . not for main memory. 
 . L1 cache - embedded in CPU (CPU cache). 
 . also a chunk of SRAM (L2 and L3 caches). 

SRAM (static RAM): 
 . fast, expensive memory reserved for caching (storing data to be repeatedly accessed). 
 . made up of L2 and L3 caches. 

Core dump: 
 . (in the event of a crash) the process of copying the contents of RAM into a file 
   on a permanent storage memory module (SSD or, more commonly, HDD) for diagnostic 
   and debugging purposes. 

Memory dump: see core dump. 

------------------------------- Segmented memory: -------------------------------

--------------------------------- Paged memory: ---------------------------------

Memory page (part of RAM): 
 . a chunk of memory sized for 4KB. 
|
Physical memory (RAM populated): 
 . a bird's eyeview of the contiguous and separate pages populated 
   with data and programs (including systems). 
 . the focus: tracking of both occupied and unoccupied memory. 
|
Page table: 
 . an implemented structure that keeps track of occupied pages at different 
   offsets. 
|
Logical memory (RAM populated): 
 . a model that can only give an understanding of how much memory (pages) 
   is taken up. 
 . the focus: quantity and the (organized) content in the memory. 
|
Virtual memory (part of storage): 
 . memory on a drive that is temporarily occupied (data or program chunk is 
   paged out) when the physical memory is clogged. 
 . upon release of memory stored data is paged back in. 
|
Disk thrashing (a.k.a. disk threshing): 
 . excessive paging activity that deters the machine's performance. 

=================================================================================

Resources: 
 . TYPICALLY: storage, memory, processes (on CPU and GPU), and bandwidth. 
   => anything useful and finite. 
 . to a lesser extent graphics, sound, networking, and file management capabilities. 
 . less common: files and folders. 

Overhead: 
 . wasted resources. 

Overclocking: 
 . a method of forcing better performance of a machine, it cranks up the rate at which 
   the CPU processes instructions. However, excessive overclocking can lead to 
   the system's instability and crashing. 

UI (user interface): 
 . an interactive display for users to work with a program or an operating system. 

Command prompt: 
 . a.k.a prompt, command-line prompt, command-line interpreter, CLI. 
 . an interactive display for users to work with a program or an operating system. 
 . Itself considered to be a program, not an application. (Applications are found to be 
   in GUI-based OS; everything else is a program or a software.)

GUI (graphical user interface): 
 . simply a UI that uses graphical means (icons, app forms, etc.) to enable a user 
   to work with an OS. 
 . desktop, all windows, and other forms of GUI are built using the OS application 
   programming interface (API). 

Desktop: 
 . the largest and most fundamental GUI/part of an operating system. 
 . not to be confused with an operating system itself. 

OS (operating system): 
 . a kernel + a native compiler + API + apps + hundreds more; 
 . runs in the background; 
 . interacts with a user through its GUI; 
 . allows the user to provide text or graphical input, manipulate data, and receive 
   text or graphical output by way of giving commands or point-and-click requests. 
 . ex.: MS-DOS, Windows, Mac OS X, Linux, iOS, Android. 
 . is responsible for scheduling (timing and devoting time to) tasks and apps. 
 . (When it comes to Windows, it is important to note that a command-line prompt is NOT 
   actually MS-DOS. Though it looks like it, a prompt is actually just a shadow of DOS 
   as its functionality is purely command-based. DOS itself, like any other real 
   operating system, is actually capable of bigger things like graphics, whereas 
   a command prompt is not. This is why we have DOS emulators like DOSBox.)

Kernel: 
 . a core OS program. 
 > manages the amounts of memory, storage, and processing power necessary to run a user 
   application or an essential program (compiler, debugger, text editor, text formatter, 
   etc.). 
 . manages input/output device communication, drivers, networking capabilities, etc. 
   for every application. 
 . Once an OS is over-written, so is the kernel. 
 . typically written in C. 

Compiler: 
 - a program that converts human-friendly high-level source code into assembly code 
   stored in special files (called object files) before it is assembled, linked, 
   loaded, and executed. 
 - parts: 
	1) the front end (conversion into intermediate representation), 
	2) the middle (processing and optimizing the IR code), 
	3) the back end (conversion of the IR into machine code). 

LLVM (low-level virtual machine): 
 - NO LONGER an actual virtual machine, now more like a misnomer. 
 - a collection of compilers and tools. 
 - designed to aid in developing the front end and the back end (like writing and 
   optimizing compilers, working with an ISA, etc.). 
 - can convert any code into the language-agnostic IR (intermediate representation) 
   before it is digested into machine code. 
 - can itself be used by compilers for language translation. 

IR (intermediate representation): 
 - high-level standardized format a source code in any language can be translated 
   into before being digested into machine code. 

Runtime environment (runtime system): 
 . a chunk of memory assigned by the machine for instructions related to other 
   memory management and task scheduling while a program is running. 

Driver (device driver): 
 - a program that processes and re-formats output data from an application, making 
   it a meaningful input to the firmware. Compatibility is key. 
 - a bundled program that re-conditions the hardware, telling it how to interact 
   with the currently active operating system. 
 - (a "firmware reconditioner", a "firmware interface", a "rulebook", a "manual", 
   a "translator".)
 - helps with running "foreign" apps and games on a hosting OS. 
 - helps with running a non-native ("foreign") OS on a hosting machine. 
 - Every external and internal peripheral requires a driver to become compatible. 
 - When installing/dual-booting a new OS, a new appropriate driver is needed for 
   every component. 

Video driver: 
 - a program that does all the accessing to the video memory. 

Daemon (Disk And Execution MONitor): 
 . a process that handles service requests (for transferring and processing of data 
   from a peripheral device). 


				User
________________________________________________________________________
			Apps + user drivers 				}
________________________________________________________________________} Operating
		Kernel + compiler + device drivers 			} System 
________________________________________________________________________}
			Firmware on hardware
________________________________________________________________________



Storage (hard drive space): 
 . for storing and accessing LONG-TERM data (files, games, other software, individual 
   programs, etc.). 
 . not to be confused with (random-access) memory. 

Hard disk drive (HDD): 
 . a storage device that uses magnet-based tech to store and retrieve digital data. 

Solid state drive (SSD): 
 . a storage device that uses circuit-based flash memory tech to store and retrieve 
   digital data. 

General-purpose computer: 
 . a system featuring the arithmetic and logic unit (ALU), control unit (CU), 
   memory, input/output (I/O), and a bus system (data and address buses) 
   connecting these components. 

=================================================================================
=================================== Hardware: ===================================
=================================================================================

semiconductor: 
 - a chip. 

circuit: 
 - electronic components (transistors, etc.) working together to form digital 
   logic. 

IC (integrated circuit): 
 - smaller circuits cast together on a silicon chip (semiconductor material). 
 - basically, circuits on a chip. 

Microprocessor: 
 - an IC with CPU capability (ALU, CU, and an array of registers). 

PCB (printed circuit board): 
 - a set of integrated circuits - chips (e.g., CPU, memory, etc.) - and other 
   small devices wired to work together to form a system. 

General-purpose register: 
 - a register that can be used by the machine or the user (programmer, of course) 
   to store any value and not be employed exclusively for keeping track of 
   the state of a currently running program. 

Graphics card: 
 - an umbrella term that would be applied both to: 
   (a) the old-school 1990s VGA cards and 
   (b) the modern, better equipped video cards from companies like Intel, AMD, 
       and Nvidia featuring a dGPU. (A graphics card: 
 	- has a GPU 
  	 > a chip with cores (2 threads each) and 
 	  logic circuits
 	  > has hardware-accelerated 3D rendering features. 
 	- PCIe connector (high-speed connect, connects with 
  	 motherboard as the interface to the PC)  ) 
 	- ex.: msi GeForce RTX 2070 Super. 

VGA: 
 - 1980s-1990s graphics technology 
 - a card dedicated to doing all the graphics-oriented work 
 - did not have a GPU 
 - would feature a 15-pin D-subminiature VGA connector 

GPU: 
 - a.k.a., graphics card, video card, video display controller, 
   graphics controller
 - a chip (just like a CPU) 
 - iGPU (integrated GPU) would sit on the CPU chip 
 - dGPU (dedicated GPU) would sit on a separate board, the modern graphics card 
   (which is technology started in 1999 and still going strong) 

Core: 
 - a pair of parallel circuits called threads, designed for concurrency 
   (multi-processing). 

Graphics card accelerator: 
 - ex.: 3dfx Voodoo, NVIDIA Quadro series, NVIDIA Tesla series. 

====================================== II: ======================================

Microcontroller: 
 - a small IC (chip) that manipulates, translates, routes, and stores data 
   between the CPU and a peripheral. 

SBC: 
 - single-board computer 

SoC (system-on-a-chip): 
 - an integrated circuit holding all components of a system. 

GPIO (general-purpose input/output):
 - a digital-signal pin on a circuit that can be used to provide input to or 
   output from the software 
 - can be used for any kind of application 

BMC (baseboard management controller): 
 - a specialized processor 
 - checks on the physical state of a device 
 - uses sensors 
 - communicates with the sys. admin. 
 - a.k.a. main controller. 

=================================================================================
============================ Let's split some hairs: ============================
=================================================================================

Program: 
 - instructions written to get hardware to carry out a task. 
 - questionably used interchangeably with "software" and "application". 
 - e.g., "Hello, world!". 

Software: 
 - an extricable set of programs working together to accomplish larger tasks. 
 - typically thought of as an application in the making or a grey area between 
   program level and app level, like a professional development tool for finishing 
   an application. 
 - occasionally used interchangeably with "application" and "software application". 

Application: 
 - finished software - a total program package with a user interface - designed to aid 
   a general user in completing an entire project, however formal or informal. 
 - occasionally used interchangeably with "software" and "software application". 

System: 
 - a super-program, functioning as an interactive environment, that provides 
   and manages subordinate programs. 

=================================================================================
=================================================================================
=================================================================================

Freeware: 
 - software that is distributed freely at no cost to anyone. 

Shareware: 
 - software with essential functionality or some of its content accessible at 
   no cost to anyone, but the rest of it is to be paid for. 

Freemium: 
 - see shareware. 

Donationware: 
 - software that is distributed freely at no cost to anyone but with 
   an expectation of compensation for the work. 
 - is essentially freeware. 

=================================================================================
=================================================================================
=================================================================================

Platform (computing platform): 
 - fancy/tech synonym for: an operating system or a (virtual) environment. 

Cross-platform: 
 - can be executed on any operating system or development environment. 

Multi-platform - see cross-platform. 

Codebase: 
 - a composite of source code gathered from different places and intended for 
   creating software or a game. 

File extension: 
 - a suffix (typically comprised of three letters) simply indicating the role 
   of a file. (See all conventions tied to the use of file extensions.) 
 - Can be custom-made by any developer, but one has to be mindful of all formal 
   extensions that already exist. 

Executable: 
 - A file written entirely in binary code (machine code) and targeted by the machine 
   at the user's request to run the internally coded program. Typically, in Windows 
   the file extension for the file would be .exe, for Mac it is .app, and for Linux 
   it is .out . 

Low-level programming language: 
 - ex.: machine code, Assembly, (C/C++). 
 - closer to the hardware: best used for writing operating systems, kernels, 
   drivers, and embedded systems. 
 - hardware-dependent: the language "flavor" and programming nuances depend on 
   the hardware specs of the machine. 

High-level programming language: 
 - ex.: C/C++, C# ; scripting (i.e., interpretable) languages: Java, Python, etc.
 - more readable. 

Source code: 
 - the finished functional code (before it is compiled or interpreted). 

Toolchain: 
 - an array of tools and resources (programmings languages, programs, libraries, 
   operating systems, etc.) used for different facets of a large project 
   (development for a specific OS, porting, GUI customization, client scripting, 
   server scripting, graphics and shader framework, database management, data 
   serialization, web servers for hosting, transaction handling, etc.). 

=================================================================================
=============== Programs others would expect you to know by now: ================
=================================================================================

Compiler: 
 - a program that converts high-level source code into assembly code encased 
   in something called object files. 
 - compiling can be done once before multiple executions regardless of the input.

Assembler: 
 - a program that converts assembly code into machine code. 

Linker: 
 - a program that integrates libraries into the assembled machine code for full 
   functionality and digests the combination into executable binary code. 

Compiled languages: 
 - Examples: typically, programming languages. 
 - Pros: 
   = faster conversion of source code 
 - Cons: 
   => slower analysis of the entire source code (compiles the entire source code 
      before the execution.) 

Interpreter: 
 - a program that translates a script line-by-line directly into an executable 
   at runtime.    
 - interpreting has to be done for every execution regardless of the input.
 - Typically written in C. 
 - Pros: 
   = faster analysis of source code <= no compiling involved. 
 - Cons: 
   = program is converted line by line, instruction by instruction, into output 
     for CPU's execution. 
   => slower conversion of source code 

Interpreted languages: 
 - Examples: typically, scripting languages ; Java, Perl, Ruby. 

Library: 
 - your intermediary code calls the inner-layer library (using its methods and 
   classes/structs)
 - (.h's) 
 | 
 - the user must include .lib and .dll . 
 - ex.: OpenCV, SDL, 

=================================================================================
============================== Tokens / elements: ===============================
=================================================================================

token: 
 - a word used in code. 

directive (preprocessing directive): 
 - a token that denotes the programmer's request to include code from another file 
   (typically, a library). 
 - Because it's a special request meant for the compiler to handle code inclusion and 
   substitution, it is not considered a keyword. It does not work with data. 
 - ex.: #include, #define. 

keyword: 
 - a language token recognizable by a compiler. Determines how a program will behave. 
 - tokens like #include and #define are called preprocessing directives; these are  
   responsible for code inclusion and substitution and are not 
   considered to be keywords as they do not determine how a program behaves. 
 - ex.: using, static, void, return, auto, vector. 

identifier: 
 - a name, essentially ; [_custom name] 
 - ex.: in int val = 0; val is an identifier, a name for a variable to hold the value 0. 

constant: 
 - a fixed value defined with "#define" or "const". 
 - ex.: -3, "Jim", 'a', 3.14. 

operator: 
 - a symbol (composite) that denotes a math operation, a logic operation, or use 
   of a function. 
 - ex.: << , >> , + , == , || , . , :: , : , ( 

punctuator: 
 - a symbol (composite) that has a non-operational meaning. 
 - ex.: ; 

expression: 
 - data (value, data set, object, etc.) or instructions that result in data. 

=================================================================================
=================================================================================
=================================================================================

Documentation: 
 - a documented technical explanation of what something is and 
   what it does. For example, for something that only a Microsoft compiler can 
   understand, go to MSDN (Microsoft Developer Network website). 
 - something to be looked into and analyzed by the reader before they storm off 
   to StackOverflow and report their findings. 
 - A lot of the time the documentation can get too technical and abstruse, 
   sending the reader down the documentation lookup rabbithole. This can have 
   the unfortunate side-effect of putting off the reader, forcing them to give up
   on documentation and look for something more galvanizing to do. 

Specification (depends on the context): 
 - a method for accomplishing something (solution) 
 - a manual for something (functions) 

=================================================================================
====================== Essential programs and libraries: ========================
=================================================================================

IDE: 
 - integrated development environment. 
 - ex.: Visual Studio, Oracle's NETBeans. 

SDK: 
 - an extension of IDE: compiler + debugger + software framework. 
 - (a package of softDev tools for building applications.) 

API: 
 - a program that allows for other programs to communicate with one another. 
 - libraries, application programming interfaces, platform implementations. 
 - allows interaction with existing applications (or operating systems). 
 - ex.: 	Google Maps API, 	Twitter API, 	Pay with PayPal; 
		WinAPI (Windows), 	Cocoa (OS X); 
		Direct3D, 		DirectX, 	(OpenGL). 

API documentation: 
 - reference manual 

API specification: 
 - determines the input and output of the API's work. 
 - demands slightly more involved understanding, outlining how a dev can use it. 
 - (Sort of a middle ground between a doc and a def.) 
 - outlines API's designed behavior, i.e. recognition and use of syntax-compliant code. 
 - Example: OAS (OpenAPI)
	"The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", 
	"RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted 
	as described in BCP 14 RFC2119 RFC8174 when, and only when, they appear in all capitals, 
	as shown here."
 - OpenGL: https://registry.khronos.org/OpenGL/specs/gl/glspec46.core.pdf

API definition: 
 - more in-depth, outlining how a machine can use the API. 

Framework: 
 - a program that integrates its own code (classes, interfaces, libraries, etc.) 
   with your code, translates the combination into machine code, and executes 
   that code. 
 - made of .c's , .h's , ready-made bin's , etc. 
 - tailored for building applications. 
 | 
 - no need for the user to include .lib and .dll . 
 - ex.: .NET Framework, .NET Core, OpenGL. 

=================================================================================

Compile time: 
 . a period of time devoted for processing the program's instructions and data 
   before that program starts running. 

Runtime: 
 . the meaning of the word depends on the context. 
 . a period of time devoted for processing instructions and/or data while 
   the program is running. 

Stack: 
 . a part of memory that is allocated for variables statically (at compile time). 

Heap: 
 . a part of memory that is allocated for objects dynamically (at runtime). 
 . all heap memory must be "released" (cleared) by the end of the program. 

=================================================================================

Operating system interface: 
 . a technical design for communication between programs. 

POSIX (Portable Operating System Interface similar to that of Unix): 
 . Linux and the like. 
 . technical designs for ensuring compatibility between any OS and any machine. 
 . conceived and trademarked by IEEE. 
 . It is an abstract design, NOT an operating system. 
 . This reduced the cost of labor and resources, avoiding the need for rewriting 
   software, tailored for just one OS, to work on one more OS. 

=================================================================================

Unhandled exception: 
 - an event unaccounted for and not taken care of in code, resulting in an error.

=================================================================================

Stability: 
 - no unhandled exceptions (all special events are taken care of). 
   = incompatibility can be an issue here. 
 - no change in software's behavior (with or without a patch or bugfix). 
 - no snowballing corruptions resulting in multiple crashes. 

=================================================================================

Disk image: 
 - a large file formatted like a disk to contain massive amounts of data that 
   can make up an entire independent system. 

=================================================================================
============================== Intermediate stuff:  =============================
======= Tech talk - industry's favorite FUBU may not be so FUBU after all =======
=================================================================================

embedded systems: 
 - hardware and software tailored together for a specific function. 

distributed systems: 
 - a system consisting of parts on different devices that can exchange data. 
 - ex.: telecommunications, network apps (WWW), cloud computing, peer-to-peer 
   computing, real-time process control systems (Git), MMORPGs, VR communities. 

=================================================================================

booting: 
 - the process of loading an operating system into storage or memory. 

=================================================================================

FPGA (field-programmable gate array): 
 - an IC that is first manufactured and then designed and configured by 
   a customer or the developer. 

=================================================================================

real-time operating system (RTOS): 
 - a system relied on for producing a timely response, which is why it has 
   fixed deadlines. 
 - ex.: air traffic control, reservation systems. 

=================================================================================

machine learning:
 - this is the part where the discussion is about machines learning things. 
   I'm talking artificial intelligence here. 

=================================================================================

graphics driver: 
 - a program that adjusts bitmap information before it's passed on to the GPU. 
 - this is the way, and nothing bypasses the driver 
 - located in the main memory of the OS
 - while packed and unpacked with the OS, it is specialized for the graphics 
   hardware. 
 - RESPONSIBLE FOR: 
   = conversion of OS-specific output into GPU-specific input 
   = scheduling 

GPU: 
 - RESPONSIBLE FOR: 
   = optimization: memory management, performance 
   = rendering math: vertex and fragment shading (processing)  
   = rasterization to the buffers 

=================================================================================
================================== Networking: ==================================
=================================================================================

IT: 
 . information technology 
 . a term typically used to refer to IoE (the Internet of Everything) 

Database: 
 . ex.: a hard drive, a stick, a server. 
 . a place for storing data. 

Server: 
 . a remote device with dedicated software for storing content. 

Data center: 
 . a collection of servers physically grouped together. 

Server farm: 
 . see data center. 

Cloud application: 
 - software accessed through the Internet. 
 - managed by a server, not the client. 

Cloud computing: 
 - using additional storage and means for better performance through the Web 
   without the user's interference. 

Infrastructure device: 
 - a peripheral for building a computer network 
 - a server, a storage device, a hypervisor, etc. 

=================================================================================

extensible language - 

=================================================================================

Mutable data: 
 - data within an object that can be changed in any way. 

State data: 
 - data specific to the instance of a class. 

=================================================================================

Dynamic link library (dll): 
 - an encoded dependency that typically handles data stored in the hardware 
 - works only in Windows 
 - works with all languages 

=================================================================================

Self-documenting: 
 - self-explanatory 
 - has a historical walkthrough 

=================================================================================

Tech stack: 
 - tools used to build web and mobile applications. 

=================================================================================

Plug-and-play (PnP): 
 - a device or computer bus that enables the machine to make use of a recently 
   added hardware component without the need for a user to do a manual setup with 
   configurations. 

=================================================================================

5_tech talk_ industry's favorite FUBU may not be so FUBU after all
I'm may be a pleb, but you are an asshole

feasibility study: 
 - assesses whether a project is worth it (value vs. cost is good). 
 - assesses whether an alteration of a project is worth it. 

=================================================================================

critical error handler - 

=================================================================================

Scalability: 
 - ability to handle massive multi-user activity. 
 - functional versatility ? 

=================================================================================

extensible language - 

=================================================================================

machine learning - this is the part where the discussion is about machines 
	learning things. I'm talking artificial intelligence here. 

=================================================================================

multi-platform - 


=================================================================================
================================= System security: ==============================
=================================================================================

rooting - disabling system security. 

modding - changing the hardware of a device to your liking. 

=================================================================================
=================================================================================
=================================================================================



