"
In C programming, storage classes define the scope (visibility) and lifetime (duration) of variables. There are four storage classes in C:

1. **Automatic (auto):** Variables declared inside a function without any storage class specifier default to automatic storage class. They are created when the function is called and destroyed when the function exits. Example:
   ```c
   void func() {
       auto int x; // Equivalent to: int x;
       // Variable x is automatic
   }
   ```

2. **Static:** Variables declared with the `static` keyword retain their values between function calls. They are initialized once and retain their values throughout the program's execution. Example:
   ```c
   void func() {
       static int x = 0;
       // Variable x is static
   }
   ```

3. **Extern:** Variables declared with the `extern` keyword are defined elsewhere in the program (usually in another file) and are accessible to multiple source files. Example:
   ```c
   extern int x;
   ```

4. **Register:** Variables declared with the `register` keyword suggest the compiler to store them in CPU registers for faster access. However, modern compilers are usually good at optimizing, and using `register` often has little effect. Example:
   ```c
   register int x;
   ```

Additionally, in C++, there's another storage class called `mutable`, which applies only to class members. It allows modifying member variables declared as `mutable` even in const member functions. However, this concept doesn't exist in C.
"
_
