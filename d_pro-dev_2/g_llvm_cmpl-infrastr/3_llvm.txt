
===================================================================================
LLVM , OR BEYOND THE LOW-LEVEL VIRTUAL MACHINE 
===================================================================================
"
LLVM originally stood for "Low Level Virtual Machine." However, the project has evolved significantly beyond
  the scope of a traditional virtual machine. While the name remains, it is now more accurately considered
  an orphan initialism and a brand name for a comprehensive collection of compiler infrastructure and tools.

LLVM provides a modular and reusable framework for building compilers, optimizers, and code generation tools.
  Its core component is the LLVM Intermediate Representation (IR), a low-level, platform-independent language
  that serves as a common target for various frontends (like Clang for C/C++ or Rustc for Rust) and a source
  for various backends that generate machine code for different architectures. This design allows for extensive
  optimization and code analysis to be performed at the IR level, independent of the source language or target
  hardware.
"


"
LLVM was originally developed as a research infrastructure at the University of Illinois at Urbana-Champaign,
  primarily to investigate dynamic compilation techniques and lifelong program analysis and optimization for
  both static and dynamic programming languages.
  
While the "VM" in its name originally stood for "Virtual Machine" and referred to its Low-Level Virtual Machine
  Intermediate Representation (IR), its initial purpose was not to be a traditional virtual machine runtime.
  Instead, it aimed to provide a modular and reusable compiler infrastructure that could support advanced
  optimization techniques across various languages and platforms. This early work laid the foundation for its
  later growth into a comprehensive compiler and toolchain technology used widely in industry and academia.
"
_
