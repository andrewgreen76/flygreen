
Evolution of atomicity enforcement mechanisms :


======================================================================
Old idea : 
======================================================================
> disabling interrupts on all CPUs -and- 
> regulating threads in the critical section with loads/stores of the barring flag value alone
- trusting other threads : 
  - (no) async handling of interrupts by multiple threads/processes 
  - (no) losing interrupts 
  - (no) excessively long lock-outs  
  - (no) bad behavior like inducing spinning 
    - (no signal to other threads , unattended barring flag)
  - liberal masking
    - overhead , increased by the number of CPUs 


======================================================================
New ideas :
======================================================================

> mutex + condition variable 

> locking hardware support
  . used in single- and multi-processor systems today
  |
  |
  |
  . test-and-set (a.k.a. atomic exchange) : 

      int TestAndSet(int *old_ptr, int new) {
	  int old = *old_ptr; // fetch old value at old_ptr
	  *old_ptr = new;     // store ’new’ into old_ptr
	  return old; 	      // return the old value
      }

_
