
===============================================================================
======================= Basic C library header files: =========================
=============================================================================== 

<stdio.h> 	- FILE I/O, macros (NULL, EOF, stderr, stdin), etc. 
<stdlib.h> 	- rand num gen 
<string.h>	- strcpy(dest, src); 	strlen(buffer); 
<Windows.h>	- WinAPI (window handling), 
		- sleep() for Win 	
<unistd.h>	- sleep() for Linux, POSIX OS API 

------------------------ Non-standard C header files: ------------------------- 

<curses.h>	- an alternative to conio.h; 
		- macros: keyboard codes, colors, etc.; 
		- screen handling, optimization functions; 

--------------------- DEPRECATED C library header files: ---------------------- 

<conio.h> 	- console I/O, _getch(stdin), WaitKey() 
 - for MS-DOS compilers (e.g., Turbo C) ; will not work on Linux, Mac, etc.) 
 - not of ISO C/C++ or POSIX. 

===============================================================================
======================== I/O basics, functions, etc.: =========================
=============================================================================== 

					|	 print		  put	
Three data flow schemes: 		|	  out()	 	  out
|					|	 <-+--		 --+->	
(1) 	stdin: keyboard input. 		|	   | 		   | 
	stdout: output to console. 	|	 --+->		 <-+--	
(2)	char[] buffer 			|	  in()		  in
(3)	FILE stream. 			|	 scan		  get
					|	

------------ Writing, reading, skipping, composing, decomposing: -------------- 

stdin/out (i/o, key/con stream): 
|
printf("Name: %s, age: %d", n, a) 	-  comp string  -> stdout. 
scanf("%x", &var) 			-        stdin (-> one var). 

's' is for "string": 
|
sprintf(dstBf, "Sqrt of %d is %d", a,b) -   comp string  -> string buffer. 
sscanf(srcBf, "%s %d", month, &year) 	- string buffer (-> decomp). 

'f' is for "file": 
|
fprintf(dstFptr,"%d.%s\n", i, str) 	-   comp string  -> file. 
fscanf(srcFptr,"%s %d\n", &nome, &voto) -   file string (-> decomp).

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

putc(c, dstStrm/dstVar)	- 	 char  -> stream. 
c=getc(srcStrm/srcVar)	- stream char (-> var c). 
|	
putchar(c) 		- 	char  -> stdout. 
c=getchar() 		- stdin char (-> var). 
||
fputc(c, fptr)  	- 	char  -> file. 
c=fgetc(fptr)		-  file char (-> var). 
|	
puts(str) -   str -> stdout.  	
gets(str) - stdin -> str. 

===============================================================================
================================== FILE ops: ==================================
=============================================================================== 

Creating/opening a new file: 
 > FILE *fp;
 > fptr = fopen ("file_name", "mode");

Reading from and writing information to a file: 
 > fprintf(), fscanf(), fputc(), fgetc(), etc. 

Closing a file: 
 > fclose (fptr); 


File Mode	Description
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
r		reading. 
w		writing. If present, all data inside is truncated
a		append mode. The content within the file doesn't change.
r+		reading and writing from beginning
w+		reading and writing, overwriting a file
a+		reading and writing, appending to file


fwrite() - Write Items
fread()	- reads raw bytes from binary files.
fseek() - 

===============================================================================
============================= Other necessities: ==============================
=============================================================================== 

------------------------- String format specifiers: --------------------------- 

%i - as an int 
%d - as a decimal integer 
 > only scanned with a precision. 
%f - as a float (smaller precision, takes less mem, faster graphic performance)  
%lf - as a double (greater precision, takes more memory, slower performance) 
%c - as a character 
%s - as a string 

---------------------- Sub-string special characters: ------------------------- 

\n	- new line 
\t	- tab 

--------------------------- Conversion functions: ----------------------------- 

atof() - string to float/double 
dtoa() - double to string 
atoi() - string to int 
itoa() - int to string 
Integer.parseInt(String.valueOf(ch)); 	- char/string to int 
Integer.toString(c);			- int to char/string 

===============================================================================
============================ Cool / useful tricks: ============================
=============================================================================== 

----------------------------- Formatting tricks: ------------------------------ 

printf("%.Xs\n", "string");		//with consts 
printf("%.*s\n", X, "string");		//with vars 
 - print the first X chars of string. 

printf("%Xs", "string");		//with consts 
printf("%*s\n", X, "string");		//with vars 
 - print empty spaces if strlength is less than X; 
 - end of string is X+ charslots away from the start of the line. 

printf("%X.Ys\n", "string"); 		//with consts 
printf("%X.*s\n", Y, "string"); 	//with vars 
 - trim string to first Y chars, tab end of str X spaces from start of line. 
 - args are eval'd and pushed onto the mem stack right-to-left. 

printf("%	X.Y	s\n", 		"string"); 
printf("%	*.*	s\n", 	X, Y, 	"string"); 

-------------------- Other potentially useful functions: ---------------------- 

swap() - swaps the integer values between two vars. 
qsort() - sorts elements in an array in ascending order. 
putwc() — Write Wide Character
putwchar() — Write Wide Character to stdout

------------------------- Other cool/useful tricks: --------------------------- 

Swapping values between two vars - XOR: 

	a ^= b ^= a ^= b ; 

 -or- use swap(); 

=============================================================================== 
