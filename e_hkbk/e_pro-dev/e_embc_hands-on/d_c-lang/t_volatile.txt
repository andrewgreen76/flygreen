
Sort of like the opposite of "static". 

========================================================================================

Can be influenced by outside agents such as : 
. hardware
. any interrupt
. any other process 
. any other thread
  . using "volatile" is not ideal when race condition is a concern 

========================================================================================

"
A "volatile" variable in programming is a modifier that can be applied to a variable declaration. This modifier informs the compiler that the variable's value may be changed at any time by external factors not directly related to the program's flow. As a result, the compiler should not optimize or reorder operations involving the volatile variable, ensuring that the program behaves as expected in the presence of external changes. Here are the key characteristics that make a variable "volatile":

1. **Prevents Compiler Optimization:**
   - The "volatile" keyword prevents the compiler from making certain optimizations on the variable. Without this keyword, the compiler might assume that the variable's value does not change between successive reads, leading to incorrect optimizations.

2. **Memory Access Guarantees:**
   - The "volatile" keyword indicates that the variable may be modified asynchronously, such as by hardware, interrupts, or other threads. It ensures that the compiler generates code to read and write the variable directly from and to memory, avoiding caching or register optimizations.

3. **Use in Multithreaded Environments:**
   - In multithreaded environments, a volatile variable is often used to signal between threads or to represent shared state that may be modified by multiple threads. The "volatile" keyword helps ensure proper visibility of changes between threads.

4. **I/O Operations:**
   - "volatile" is commonly used when dealing with hardware registers or memory-mapped I/O, where the value of a variable may change asynchronously due to external devices or interrupts.

5. **Interrupt Service Routines (ISRs):**
   - In embedded systems or scenarios with interrupts, volatile variables are used to represent values that can be modified by an interrupt service routine (ISR) or other asynchronous events.

6. **No Assumptions about Stability:**
   - The compiler makes no assumptions about the stability of the variable's value between reads or writes. It assumes that the value may change at any time, and each access to the variable results in an actual memory read or write.

Here's an example of declaring a volatile variable in C or C++:

```c
volatile int sensorValue;  // Declaring a volatile variable
```

**Example Usage:**
```c
while (sensorValue == 0) {
    // Do something while waiting for sensorValue to change
}
```

In the example above, the "volatile" keyword ensures that the compiler does not optimize away the repeated reads of `sensorValue`, recognizing that its value might be changed asynchronously by external factors.

It's important to use the "volatile" keyword judiciously, as it should be reserved for situations where the value of the variable can change outside the normal flow of the program. Overusing "volatile" can lead to unnecessary performance penalties in some cases.
"
_
