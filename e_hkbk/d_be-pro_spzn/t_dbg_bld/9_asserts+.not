
2. Assertions: The `assert` macro is another common debugging statement that checks a condition at runtime and aborts the program if the condition is false. However, many compilers provide an option to disable assertions at compile time, which effectively removes the `assert` statements from the compiled code. For example:

```c
#include <assert.h>

int divide(int a, int b) {
    assert(b != 0);  // Debugging assertion
    return a / b;
}
```

In release builds, assertions are typically disabled, eliminating the associated runtime overhead.

These are just a couple of examples of how you can incorporate debugging statements in C and C++ that can be controlled at compile time. By selectively including or excluding code based on compile-time conditions, you can customize the behavior of the program for debugging purposes while optimizing the final executable for production builds.

