
Liberally disabling interrupts for the sake of atomic (uninterrupted) execution of a critical
section is a BAD IDEA.  



==========================================================================================
Enforcing atomicity on a SINGLE CPU - ASSUMING ALL CALLING THREADS ARE GOOD (not true) :
==========================================================================================
. "we must trust that calling threads will not abuse privileges"
   . threads flipping interrupts ASYNC to exercise atomicity 
   . UNRESTRAINED CALLER locking others out of the critical section for too long , not sharing CPU fairly 
   . possibility : A BAD PROCESS forcing the CPU to spin infinitely 
     . nothing the kernel can do about this 



==========================================================================================
Deciding on atomicity across MULTIPLE CPUS - CONFLICT OVER INTERRUPTS : 
==========================================================================================
. can't have multiple processes/threads tweaking the same set of hardware interrupts
  at the same time 



==========================================================================================
Long-deferred (i.e. , masked , disabled) interrupt problem :  
==========================================================================================
 . may end up a lost interrupt , i.e. , missed by the kernel 
=> system issues
   . job (e.g., I/O) finished
   > job INT issued but suppressed
   > WHAT IF INT DIES BEFORE END OF CRITICAL SECTION EXECUTION ??? 
   > kernel will never see the job INT , will never let the waiting process know 
   > process waiting on I/O will starve forever


 . Mask interrupts when it is absolutely necessary. 
   . the kernel needs to be able to access its own data structures atomically
  => that is when it makes sense to mask interrupts 
   . doing it for every user process , thus compromising the kernel's integrity , is not worth
     a system-level nightmare

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What we may want :


CRIT-SECT-EXEC  CRIT-SECT-EXEC  C-|
		mask-mask-mask-mask_____
INT : _________________|		|___________________
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
////////////////////////////////////////////////////////////////
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What we certainly do NOT want :


CRIT-SECT-EXEC  CRIT-SECT-EXEC  CRIT-SECT-EXEC  CRIT-SECT-EXEC  
		mask-mask-mask-mask-mask-mask-mask
INT : _________________|		|___________________
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



==========================================================================================
INT mask/unmask on multiprocessors is slower than on the more traditional CPUs. 
==========================================================================================
_
