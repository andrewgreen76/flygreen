
Fairness metric :
. reflects how close completion times are between jobs
. If job A finishes at time x and job B finishes at time x+y, the fairness metric is ...

     F = Endtime(A) / Endtime(B) = x / (x+y)

. we want F as close to 1 as possible (jobs finishing at about the same time) 

=============================================================================================

CFS (completely fair scheduler) :
. essentially RR 
. uses vruntimes (virtual runtimes) instead of just time slices
. every process gets its own vruntime quantum (processes are weighted) 
. the longer the job, the longer its vruntime
. The system records the vruntime for every job in a dedicated data structure - a red-black tree. 
. The next time jobs come up for scheduling, they will be prioritized by their vruntime. 
  . Jobs are scheduled shortest vruntime to longest vruntime.
. introduces lookup/sort/switch overhead , especially when more jobs are to be scheduled  
. uses "control parameters" to achieve a balance between fairness and performance
  . sched_latency (typically 48 ms)
    . proc quantum = sched_latency / n (of procs)
    . scheduler runs jobs longest vruntime to shortest vruntime , allowing the same quantum for every job (a la RR) 
    . once a job finishes , the quantum is recalculated ( sched_latency/(n-1) )
  . min_granularity = floor on vruntime 
    . typically 6 ms 
    . More jobs means more switching, which means greater lookup/sort/switch overhead.
      min_granularity is used to limit quantum reduction, thereby limiting the overhead.
  . the nice level
    . between -20 and 19 (40 values) 
    . typically 0
    . a job with a lower nice level gets higher priority (i.e., gains greater weight)
    . each process gets its own time slice length 

      -----------------------------------------------------------------

      time_slice = sched_latency * ( weight_k / sum_present_weights )

      -----------------------------------------------------------------

      static const int nice_to_weight[40] = {
	88761, 71755, 56483, 46273, 36291,	//-20 to -16
	29154, 23254, 18705, 14949, 11916, 	//-15 to -11
	 9548,  7620,  6100,  4904,  3906, 	//-10 to -6
	 3121,  2501,  1991,  1586,  1277, 	//-5 to -1
	 1024,   820,   655,   526,   423, 	//0 to 4
	  335,   272,   215,   172,   137, 	//5 to 9
	  110,    87,    70,    56,    45, 	//10 to 14
	   36,    29,    23,    18,    15, 	//15 to 19
      };

      -----------------------------------------------------------------

      vruntime_i =
			normzd_vruntime_i +
			+ ( weight_0=1024 / weight_i ) * actual_runtime_i

      => The greater the weight (the higher the priority) , the lower the new vruntime. 

      -----------------------------------------------------------------

.
