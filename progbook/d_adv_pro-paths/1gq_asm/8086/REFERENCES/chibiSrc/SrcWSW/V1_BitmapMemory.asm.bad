
PrintChar:
	push di
	mov di,1000h
	push ax
		push ax
			xor		ax,ax
			mov		ds,ax		
			mov	al,[ds:CursorX]
			mov ah,0
			sal ax,1
			add di,ax
			
			mov	al,[ds:CursorY]
			mov ah,0
			sal ax,6			;32 columns, 2 bytes per column
			add di,ax
		pop ax
		sub al,32
		mov ah,00000000b			;Palette Flip Etc
		mov WORD PTR [ds:di],ax		;VHBPPPPT TTTTTTT - Tile / Palette / wsc Bank  / Hflip / Vflip
		inc BYTE PTR [ds:CursorX]
		cmp byte ptr [ds:CursorX],28
		jne PrintCharNoNewLine
		call NewLine
PrintCharNoNewLine:
	pop ax
	pop di
	ret

ScreenInit:
	cli

	xor		ax,ax
	mov		bx,ax
	mov		cx,ax
	mov		dx,ax
	mov		es,ax
	mov		ds,ax
	mov		bp,ax
	mov		ss,ax
	mov		sp,0x8000

	out		00,ax		;REG_DISP_CTRL - disable all layers
	
	; This needs to happen before we copy the palette data, since
	; the upper 48kB of RAM only are available in Color mode.

	ifdef BuildWSC
				  ;BCP0-0-- - Planar Color Bpp
		mov		al,11000000b  	;DISP_MODE_4BPP + DISP_MODE_COL + DISP_MODE_PLANAR
	else
				  ;BCP0-0-- - Planar Color Bpp
		mov		al,00000000b  	;DISP_MODE_4BPP + DISP_MODE_COL + DISP_MODE_PLANAR	
	endif
	
	out		60h,al 			;REG_DISP_MODE

	; Copy font data
	;MEMCPYW RAM_4BPP_TILES_BANK0_BASE, 0xf000, font, fontSize/2
	
	xor 	ax,ax	
	mov		ds,ax			;segment 0 (RAM) is implied	
	ifdef BuildWSC
		mov		di,4000h 		;RAM_4BPP_TILES_BANK0_BASE
	else
		mov		di,2000h 		;RAM_4BPP_TILES_BANK0_BASE
	endif
	mov		ax,0f000h
	mov		es,ax
	mov		si,BitmapFont
	mov		cx,BitmapFontEnd-BitmapFont
	cld			
	
CopyFontAgain:
	;movsw	
	mov al,[es:si]
	mov [ds:di],al			;4 bitplanes - all the same!
	inc di	
	mov [ds:di],al
	inc di
	ifdef BuildWSC
		mov [ds:di],al
		inc di
		mov [ds:di],al
		inc di
	endif
	inc si
	Loop CopyFontAgain
	
	ifdef BuildWSC
		; Copy palette
		;MEMCPYW RAM_4BPP_PALETTE_BASE, 0xf000, palette, paletteSize/2
		xor 	ax,ax	
		mov		es,ax	 		;segment 0 (RAM) is implied	
		mov		di,0fe00h 		;RAM_4BPP_PALETTE_BASE
		mov		ax,0f000h
		mov		ds,ax
		mov		si,WSWpalette
		mov		cx,16
		cld			
		rep		movsw	
	else
		mov al,0			;CCC / PPPPIIII
		out 01h,al			;Background color to 0
		
		
		;Define 8 colors for our palette
		;F=Black 0=Whote
		
		mov al,20h			;11110000
		out 1ch,al			;Pool 0 to palette 0
		
		mov al,46h			;33332222
		out 1dh,al			;Pool 0 to palette 0
		
		mov al,0A8h			;55554444
		out 1eh,al			;Pool 0 to palette 0
		
		mov al,0FCh			;77776666
		out 1fh,al			;Pool 0 to palette 0
		
		
		;Select from those 8 colors to make our palette
		mov ax,7530h		;Palette 0 
		mov ax,0357h		;Palette 0 
		out 020h,ax
		
	endif
	; Clear the map
	;MEMSETW 0x0000, 0, MAP_WIDTH_CH*MAP_HEIGHT_CH
	xor		ax,ax		
	mov		es,ax		;segment 0 (RAM) is implied	
	mov		di,0000h
	mov		ax,0
	mov		cx,32*32 	;MAP_WIDTH_CH*MAP_HEIGHT_CH
	cld			
	rep		stosw
	
	
	xor		ax,ax					; reset scrolling
	out		10h,ax		;REG_SCR1_X
	out		11h,ax		;REG_SCR2_X
		
	mov		al,01h		;DISP_CTRL_SCR1_EN enable SCR1
	out		00h,al		;REG_DISP_CTRL

	mov		al,0		;LCD_ICON_SLEEP	
	out		15h,al		;REG_LCD_ICON

	in		al,14h 		;REG_LCD_CTRL	
	or		al,1		;LCD_CTRL_LCD_ON
	out		14h,al		;REG_LCD_CTRL
			;  21
	mov 	al,32h		;Screen Base SCR2-SCR1
	out		07h,al		;REG_MAP_BASE

	ret


Locate:
		mov  BYTE PTR [ds:CursorX],bh
		mov  BYTE PTR [ds:CursorY],bl
	ret
NewLine:
		mov  BYTE PTR [ds:CursorX],0
		inc  BYTE PTR [ds:CursorY]
	ret
	
PrintSpace:
	push ax
		mov al,' '
		call PrintChar
	pop ax
	ret	
	
	
WSWpalette:		;dw WSC_COLOR(4,3,10), WSC_COLOR(8,7,13)
			;  	 -RGB
			dw 0x000F
			dw 0x00FF
			dw 0x0F00
			dw 0x0FFF
			dw 0x0FFF	;9
			dw 0x0FFF
			dw 0x0FFF
			dw 0x0FF0
			dw 0x0F0F
			dw 0x00FF
			dw 0x0FFF
			dw 0x0FF
			dw 0x0FF
			dw 0x0FF
			dw 0x0FFF
			dw 0x0FF0
			

						;CX=byte Count
						;es:SI=source Data
						;AX= Dest Tile Number
DefineTiles:
	ifdef BuildWSC
		mov	di,4000h 		;4bpp tiles
	else
		mov	di,2000h 		;2bpp tiles
	endif
;Copy es:SI to ds:DI	
	push ds
		push ax
			mov	ax,0000h
			mov	ds,ax	;segment 0 (RAM) is implied	
		pop ax
		ifdef BuildWSC
			rol ax,5
		else
			rol ax,4
		endif
		add di,ax
		rep movsb
	pop ds
	ret

FillAreaWithTiles:
	push ds
FillAreaWithTiles_Yagain:	
		push bx
		push cx
			push ax
				mov di,1000h
				xor		ax,ax
				mov		ds,ax		
				
				xor ax,ax
				mov	al,bh
				sal ax,1
				add di,ax
				
				xor ax,ax
				mov	al,bl
				sal ax,6			;32 columns, 2 bytes per column
				add di,ax
			pop ax
	FillAreaWithTiles_Xagain:
			mov WORD PTR [ds:di],ax		;VHBPPPPT TTTTTTT - Tile / Palette / wsc Bank  / Hflip / Vflip
			inc di
			inc di
			inc ax
			dec ch
			jne FillAreaWithTiles_Xagain
		pop cx
		pop bx
		inc bl
		dec cl
		jne FillAreaWithTiles_Yagain
	pop ds
	ret
SetPalette:								;AX = color, DX= -GRB
	ifdef BuildWSC
		push dx
		push es
		push di
			push ax
				;swap -GRB to -RGB
				mov al,dh
				and ah,00001111b
				shl al,4	;Green
				
				mov ah,dl
				shr ah,4
				and ah,00001111b
				mov dh,ah
				
				mov ah,dl
				and ah,00001111b	;B
				or ah,al			;G
				mov dl,ah
			
				xor 	ax,ax	
				mov		es,ax	 		;segment 0 (RAM) is implied	
				mov		di,0fe00h 		;RAM_4BPP_PALETTE_BASE
			pop ax
			push ax
				sal ax,1
				add di,ax
				mov [ds:di],dx
			pop ax
		pop di
		pop es
		pop dx
		
	endif
	
	ret
