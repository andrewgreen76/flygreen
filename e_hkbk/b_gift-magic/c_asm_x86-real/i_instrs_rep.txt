
	[@]  input_buffer [@] -> SI -> [processing , yielding a result]				     -> [DI]
	     		      	       		     	      		[@] output_buffer [@] -> DI 


 . Any general-purpose register can serve as a carrier between the input data source ,
   the processing code , and the output memory.
   
 . The instructions below can help us achieve movement of data , but compared to
   the conventional 'mov' instruction , can do so much quicker. 


========================================================================================
lodsb : 
========================================================================================

 . loads [SI]_val into AL
 . offset SI is automatically incremented afterwards
 |
 . SI could be addr/offset of any input buffer (e.g., char str or a grid of bytes for
   plotting a sprite) 


========================================================================================
stosb : 
========================================================================================

 . stores AL_val into [DI] 
 . offset DI is automatically incremented afterwards
 |
 . DI could be addr/offset of any output buffer (e.g., framebuffer) 


"
- **`STOSB`**: This instruction stores the byte from the `AL` register into the memory location pointed to by `ES:DI`. The `ES` register specifies the segment, and `DI` specifies the offset within that segment.
"


========================================================================================
rep : 
========================================================================================

 . repeats the following instruction the number of times in CX
 . CX_val is decremented down to 0 , so at times it may have to be reset 
 > rep stosb 
 . this prefix to the same instruction is kind of like what the NASM 'times' directive is
   to the same 'db'/'dw'/'d?' directive
 . the 'rep' prefix can be used with 'lodsb' and 'stosb' to achieve better performance
   in memory reading and writing operations on consecutive memory addresses (offsets) 


========================================================================================
========================================================================================
========================================================================================

========================================================================================
OVERVIEW : 
========================================================================================

"
- **`REP`**: This prefix modifies string instructions (`STOSB`, `MOVSB`, etc.) to repeat the operation `CX` times. It decrements `CX` after each operation and continues until `CX` reaches zero.

So, in summary:
- **`STOSB`** listens to `ES` and `DI` to determine where to store the byte.
- **`REP`** listens to `CX` to determine how many times to repeat the `STOSB` operation.
"
_
