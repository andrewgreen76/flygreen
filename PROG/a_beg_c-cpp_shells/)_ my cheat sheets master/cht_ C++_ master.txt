============================== C++ cheat sheet ============================
===========================================================================
===========================================================================

Microsoft Visual C++ compiler is CASE-SENSITIVE. 

====================== Basic C++ library header files: ====================

<iostream> 	- console text i/o, fixed, scientific 
 C <stdio.h> 	- learn cerr, clog;

<iomanip>	- setprecision() << [num] 
		- std::hex << [num]

<fstream>	- file input, output, manipulation 

<cstdio>	- macros (NULL, EOF, stderr, stdin, etc. )	
 C <stdio.h> 	

<cstdlib>	- console commands - system("[CLIcmd]") 
 C <stdlib.h>  	- exit()	
		- rand() num gen / randomize() 

<string>	- text-in-memory ops 
 C <string.h>

<vector>	- a flexible "array" 

<cmath>		- algebraic ops 

<chrono> 	- time-tracking, clock-based ops 
<ctime> 	- for date/time 
 C <time.h> 

<Windows.h>	- WinAPI (window handling, macro STD_OUTPUT_HANDLE, 
		  HANDLE class, GetStdHandle(), SetConsoleTextAttribute() 
		- Sleep() for Win 	

---------------------------------------------------------------------------

std (C++ Standard Library): 
 - an ever-expanding collection of useful features (functions, classes, 
   template types, etc.) for C++ programming. 

!!!!!!!!!!!!!!!!!!!! REFRAIN FROM using namespace std; !!!!!!!!!!!!!!!!!!!!

 - already has functions with likely-to-be-used-again identifiers 
   (accumulate(), abs(), align(), etc.) 
 - just use std:: 
 - https://en.cppreference.com/w/cpp/symbol_index 

=========================== Pre-defined macros: ===========================

	_Post_		 _Null_		_Notnull_ 	

	_In_	

=========================== Scoped declarations: ==========================

namespace {} 	- a declarative region for differentiating variables and 
		  scoped items with the same name. 

===========================================================================
============================ Creating variables: ==========================
===========================================================================

definition 	- creation without assigning a value. 
initialization 	- creation with assigning a value (init = def + asgn). 


--------------------------------- <string> --------------------------------

string s0;          		// empty
string s0;            		// s0 = ""

string s1 {"Frank"}; 		// Frank
string s1 ("Hello");      	// s1 = "Hello"

string s2 {s1};      		// Init similar to another string. 
string s2 (s1);             	// s2 = "Hello"

string s3 {"Frank", 3};		// Init with first num of chars of str. 
string s3 ("Hello World", 5);  	// s3 = "Hello"

string s4 {s1, 0, 2};  		// Init from str, pick i, read num of chars.
string s4 (s1, 1, 2);      	// s4 = "el"

string s5 (3, 'X'); 		// Init w/ char repeated a num of times. 
string s5 (5, '*');  		// s5 = "*****" 

string s6 (s1.begin(), s1.begin()+3); 	// s6 = "Hel"
				// Init with start and end of another str. 


===========================================================================
========================= Basic I/O C++ functions =========================
==================== Stream reading, writing, ignoring ====================
=============== (Writing code around EXPECTED STREAM FORMAT) ==============
===========================================================================

- - - - - - - - - - - - - - - - Console only: - - - - - - - - - - - - - - - 

cin.get([ char[] ], [size]); 		
 - captures, limits, and loads entire keyboard input. 
cin.get(); 
 - can be used for waiting. 

cin.getline([strm],[str]); 	
 - reads from given stream into spec'd str. 

- - - - - - - - - - - - - - - - - Reading: - - - - - - - - - - - - - - - - 

[stream] >> [char];		- > _skip_ [char] _skip_
[stream] >> [str];		- > _skip_ [str]  _stop/skip_
				- single-string prompt. 

[stream] >> noskipws >> [char] 	- >[charAny]
|
[stream] >> noskipws >> [str] 	- >[str]_stop_ (DO NOT USE)

getline([ifstream], [str]);	- reads any line, including '\n'. 

 - - - - - - - - - - - - - - - - Ignoring: - - - - - - -- - - - - - - - - - 

[stream].ignore([num],'\n');	- skips num of chars or until reached '\n'.
[stream].ignore(); 		- 
[stream].ignore(numeric_limits<streamsize>::max(), ' ');
 - clearing the buffer ?? 
 - 

- - - - - - - - - - - - - - - - - Other: - - - - - - - - - - - - - - - - - 

[ifstream].eof() 

[str].length() 
[str].empty()			- ??? 

===========================================================================
================================ FILE init: ===============================
===========================================================================

Define with ifstream/ofstream/fstream 	-> assign a path 	-> open 
	-> read in with >>, write out with << 			-> close. 



	ifstream file;
	file.open("test.pmp");

	if (!file) {
		cout << "No such file";
	}
	else {
		char ch;

		while (1) {
			file >> ch;
			if (file.eof())
				break;

			cout << ch;
		}
	}

	file.close();



ifstream - stream from file. 
ofstream - stream to file. 

Create one: 
 - ofstream myFile(deskPath + filename); 

---------------------------------------------------------------------------
----------------------------- PASSING streams: ----------------------------
---------------------------------------------------------------------------

Passing streams to functions: 
 - have to be passed by reference. Otherwise, you'll get E1776 
   and C2280. When you pass something by value, a copy constructor is 
   called, but ofstream doesn't have one. 

============================ Type conversions: ============================

string to char[]: 
|
// if const str: 
std::string myWord = "myWord";
char myArray[myWord.size()+1]; //as 1 char space for null is also required
strcpy(myArray, myWord.c_str());
|
// if varying str: 
( str1 + str2 ).c_str()

=========================== Size "conversions": ===========================

L"[string]" 
 - augments the size of string to wchar_t, i.e. a size greater than char 
   (which is 1 Byte = 8 bits). Can be 16 or 32 bits depending on the OS 
   you are using. 

===========================================================================
========================= INTERMEDIATE C++ IDEAS: =========================
===========================================================================

============================== OOP concepts: ==============================
---------------------- Dynamic allocation - basics: -----------------------

Abstraction: 
 ~ the nature of the class 
 ~ What will it be like ? : 	design / behavior 
 - Purpose: for a programmer to express his/her general thoughts. 
 - How to use: access specifiers - private, protected, public. 

Encapsulation - the notion of hiding "sensitive" data (privacy, get, set). 
 ~ How exactly will it carry out its tasks ? : 	implementation. 
 ~ combining data with relevant methods in the same class. 
 ~ a way of implementing abstraction. 
 - Purpose: for a programmer to clarify behavior specifications. 
 - How to use: privacy, get, set. 

 - - - - - - - - - - - - - get...() and set...() : - - - - - - - - - - - -

The idea is (once direct access is closed off): 
 . filtering out (unintentional) bugs, bad input 
 + especially useful in large handover projects 
3) converting data within a scope (for practical reasons). 
4) (assertions - more advanced C++ implementation) 

Write good mutator and accessor functions. 

 - - - - - - - - - - - - - - Access modifiers: - - - - - - - - - - - - - -

private: cannot be accessed in child classes (unless viewed by friend). 

protected: can be accessed in child classes. 

public: accessible anywhere. 

---------------------------------------------------------------------------

Inheritance: 
 - deriving everything from the parent class to create a child 
   with extended functionality. 
 - Useful when: design intuitive to the programmer. 

 - How to use: 
>
>
> 	class Child : public Parent {
>		... 
>	};
>	// Public members of the parent - also public in the child. 
|
|
> 	class Child : private Parent {
>		... 
>	};
>	// Public members of the parent - will be private in the child. 
|
|
 - There are C++ -style structs that can inherit just like classes. 
 - Structs can have functions. 
 - Inherited member value assignments take place in the constructor. 
>	struct A { };
>	struct B : A { };
>	struct C : B { };


Polymorphism: multiple functions, SAME name, DIFFERENT type and params. 
 - Useful when: design intuitive to the programmer. 
 - How to use: 
>	void area (int x, int y) {}
>	void area (float r) {}
>	double area (double x, double y) {}

======================== Other function modifiers: ========================

virtual - 
friend - can view private members of a class. 
static:
 - 
 - also a storage class. 

============================= Storage classes: ============================

static: 
 - a static class member will be the only copy shared between objects of 
   the same struct/class. 
 - restricts a variable to the file in which it is declared, even a const. 
 - (does NOT keep a variable alive throughout the time lifetime of 
   the program, which would make it useful between sub-, peer-, and super- 
   routines.) 

auto - automatically figures out the type of assigned data. 

============================= <vector> init: ==============================

1D vector:	

Method 1: 
> vector<type> oneDimVtr(desiredSize); 
> vector<type> oneDimVtr(desiredSize, typeVal); 

Method 2: 
> vector<type> oneDimVtr; 
  oneDimVtr.push_back(typeVal); 



2D vector:	

Method 1: 
> vector<vector<type>> twoDimVtr (secDimSize, vector<type> (firstDimSize));

Method 2: 
> 	for(int i=0; i<n; i++)
	{
  		twoDimVtr.push_back(vector<type>());
		for(int j=0; j<n; j++) 
		{
			twoDimVtr[i].push_back(type());
		}
	}

----------------------------- Vector functions: ---------------------------

.push_back([val])
.push_back(obj())
.erase([elem in terms of .begin()])
.front()
.back()
.begin()
.end()
.size()
.clear()

---------------------------------------------------------------------------

When vectors are pushed onto a super-vector, not every vector populates 
a chunk of memory contiguous with that of another vector. This is why 
pointer arithmetic will not always work. 

===================== Range-based for-loops (C++11): ======================

for(elem copy decl : range_expression) { ... }
|
> for (int decldValBuf: arrORvecToScan) cout << decldValBuf << endl; 

=========================== Ternary operator: =============================

cond ? ifTrue : ifFalse; 

May be used for inits. 

===========================================================================
====================== Generic programming and STL: =======================
===========================================================================

Generic programming: 
 - A practice that allows a programmer to simplify data management, 
   making this easier for the programmer while following the rules of 
   the compiler. 

Standard Template Library (STL): 
 - a software library that provides tools for generic programming, namely: 
   | 
   containers - STL-style data structures; 
   iterators - for traversing data structures; 
   algorithms - manipulation methods (<algorithm>); 
   functors - (<functional>). 

=============================== Templates: ================================

Template: an <args> addendum to func() or classObjInit where you specify 
the knowns and unknowns. 

1. allows for passing specified data of any type. 

   > template <typename ATYPENAME>     // decl/clause <param: type name> 
   > void func(ATYPENAME arg) { ... } 
   .
   > func(data); 

2. allows for passing any data of specified type. 

   > template <type DATA>     // decl/clause <param: type and name>
   > void func() { ... DATA ... } 
   .
   > func<data>(); 

   -> template <std::string DATA>     // not invited 
   -> E0952 : "a nontype template parameter may not have class type." 

0. template <..> must be paired with function prototype AND definition. 


0. You can't combine templates; you can only combine args in a template. 
0. Template ignores/"obscures" def/scope below it before that code is used. 
0. You can use "typename" and "class" interchangeably since template code 
   is ignored. 

-------------------------------- Iterators: -------------------------------

 . *it points to an element of a vector (1D, 2D, doesn't matter). 
 . Walks through a range (array/vector). Typically starts off holding 
   the address of the range ( range.begin() ). 
 . Easier to use on a vector than on an array. 

	for (int *it = &(a[0]);
		it != &(a[ARRSIZE]);
		it++) {...}

	for (std::vector<int>::iterator it = a.begin();
		it != a.end();
		it++) {...}

--------------------------- More on containers: ---------------------------

#include <bits/stdc++.h> : 
||
<iostream>
<vector>
<string>
<stack>		
<queue>		
<algorithm>	- ranges of elements 
<map>		- a red-black tree w/ unique pairs of (keys,vals). 
		- ordered or unordered. 
		- an associative array. 
<set>		- a red-black tree with unique keys and no values. 

===========================================================================
====================== Other intermediate C++ ideas: ======================
===========================================================================

----------------------- Text / background coloring: -----------------------

Method 1: similar to the C language, use the following ... 

	std::cout << ... << "\033[0;XXm" << ... ;


Method 2: 

    HANDLE  hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    int colorScheme = (16*bgrd) + (7 * dk/lt + fgrd); 
    SetConsoleTextAttribute(hConsole, colorScheme);
    std::cout << "Colored background and colored text \n" << std::endl;


Method 3: 

	system("color XX"); 


----------------------------- Sound and music: ----------------------------

system("start wmplayer C:/.../[filename].mp3")


----------------------- Cursor - showing and hiding: ----------------------

CONSOLE_CURSOR_INFO 	cursorInfo;
GetConsoleCursorInfo(con, &cursorInfo); // PULLS UP cursorInfo, ... 
cursorInfo.bVisible = false;            // rewrites the "visible" flag, ... 
SetConsoleCursorInfo(con, &cursorInfo); // and LOADS IN the new info. 

----------------------------- using typedef: ------------------------------

When a type name gets too long: 
> using AnyTypeName = (ex.: std::...); 
> AnyTypeName obj; 

--------------------------- Structure bindings: ---------------------------

for (auto [thing1, thing2, ...] : structure) {...}

--------------------------- More storage classes: -------------------------

extern int blah ( - four purposes; see "Translation units and linkage")
{
	
}

extern "C" ( - four purposes; see "Translation units and linkage")
{
	
}

register - 

mutable - 

-------------------------------- Datatypes: -------------------------------

constexpr	- gets a var evaluated at compile time instead of runtime. 
 . used in place of a macro; 
 . can only call other constexpr functions; 
 . cannot be a void type; 
 . since C++14 can do functions with more than one statement; 


===========================================================================
============================ ADVANCED C++ ITEMS: ==========================
=================================== STL: ==================================
===========================================================================

------------------------ Advanced C++ header files: -----------------------

#include <ios>

#include <limits>

------------------------- Advanced C++ functions: -------------------------

assert() 	- performs a validity check during the debugging phase. 
		- not meant for release builds. 
