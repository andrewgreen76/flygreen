
Types are considered <AT COMPILE TIME>
 . for <EARLY TYPE-RELATED ERROR DETECTION>
 . by <THE COMPILER>
 . for <A STATICALLY TYPED LANGAUGE> 

<LATE TYPE-RELATED ERROR DETECTION>
 . is detection <AT RUNTIME>
 . by <THE INTERPRETER> 
 . for <A DYNAMICALLY TYPED LANGUAGE> 


===================================================================================

"
In C, there isn't a built-in operator or macro that directly figures out the type of a variable at runtime, as C is a statically typed language. However, you can use the `typeof` extension available in some compilers like GCC to determine the type of a variable. Here's an example:

```c
#include <stdio.h>

int main() {
    int x = 10;
    typeof(x) y = 20; // y will have the same type as x (int)

    printf("y: %d\n", y);
    return 0;
}
```

Note that `typeof` is not part of the C standard and may not be available in all compilers. For standard type checking, you typically rely on the declarations and the compiler's type system during compile time.
"
_
