
 + "ONLY THE AFFECTED FILES ARE RECOMPILED"

===================================================================================
===================================================================================
===================================================================================

+ efficient recompiling
  + "ONLY THE AFFECTED FILES ARE RECOMPILED"
  ? using multiple CPU cores
? flexible compilation based on configurations (e.g., target platform, debugging options, ...)
? portability
? automated build upon pushing a commit while using a version control system 

===================================================================================
===================================================================================
===================================================================================

"
You specify `[?].h` in both `[main_src].c` and the `Makefile` because `[main_src].c` needs to include the header to access its macros during compilation, while the `Makefile` ensures the compiler knows which source files and dependencies to use when building the final executable.
"

===================================================================================
===================================================================================
===================================================================================

"
Writing a Makefile instead of a simple script to compile and link your code offers several advantages in software development:

1. **Dependency Management:** Makefiles allow you to specify dependencies between source files, headers, and other resources. This means that if a source file changes, only the affected files are recompiled, saving time and resources. In a simple script, you would need to manage these dependencies manually, which can be error-prone and inefficient.

2. **Parallel Builds:** Make can automatically parallelize build processes, taking advantage of multiple CPU cores to speed up compilation. Scripts may require manual effort to achieve this level of parallelism.

3. **Consistency:** Makefiles provide a standardized way to build projects, making it easier for team members to work on the same codebase, regardless of their development environment or platform.

4. **Conditional Compilation:** You can use Makefile variables and conditionals to control compilation based on factors like the target platform, debugging options, or build configuration.

5. **Platform Independence:** Makefiles can be written to work on different platforms and compilers, making your project more portable. Scripts may need modifications to work on different systems.

6. **Incremental Builds:** Make can determine which parts of the code have changed and only rebuild what's necessary. Scripts usually don't have built-in mechanisms for this.

7. **Automated Testing:** Makefiles can be extended to include targets for running tests and checking code quality, making it easier to integrate testing into your build process.

8. **Clean Builds:** Make can automate the process of cleaning up build artifacts, ensuring a clean and reproducible build environment.

9. **Integration with Version Control Systems:** Makefiles can be integrated with version control system hooks to trigger builds automatically when changes are committed, which can be useful in continuous integration workflows.

10. **Standardization:** Makefiles are a standard build tool in many programming ecosystems, making it easier to understand and maintain projects for developers who are familiar with this convention.

While scripts can be used for simple build tasks, as projects become more complex, Makefiles provide a more robust and maintainable solution. However, for very complex build systems, more advanced build tools like CMake, Meson, or Gradle may be preferred, as they offer additional features and flexibility while generating platform-specific build files, such as Makefiles or project files for IDEs.
"
_
