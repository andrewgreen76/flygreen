
XOR :

    a   b	o

    0   0	0
    0   1	1
    1   0	1
    1   1	0


XOR using AND, NOT, and OR : 

x XOR y = (ab') + (a'b)
|
  x + y = ( (x)' . (y)' ) ' = x' NAND y'
  => (ab') + (a'b) = ( (ab')' . (a'b)' ) '
|
  => ( (ab')' . (a'b)' ) ' = (ab')' NAND (a'b)'
     in AND/NOT terms  	     



Design XOR in HDL :

/** Documentation : blah blah outlining behavior of the gate blah blah */

CHIP Xor {
     IN a, b;	// TYPE vars
     OUT out;	// TYPE var

     PARTS: 	// piecing together parts of the logic gate, from global input to global output.
     Not (in=a, out=nota);     // LIST gates at 1st lvl, ins for every gate. Gate (in<-x, out->procdx); 
     Not (in=b, out=notb);     // TAKE an input, PRODUCE local 'out', LOAD it into 'procdi'.
     And (a=a, b=notb, out=aAndNotb);    // One level is complete, on to gates of next level. Gate (owna<-var1, ownb<-var2, ownout->var3);
     And (a=nota, b=b, out=notaAndb); 	 // Gate (owna<-j, ownb<-k, ownout->l);
     Or  (a=aAndNotb, b=notaAndb, out=out);   // Gate (owna<-m, ownb<-n, ownout->the global out as mentioned in ifce inits above);
}

Documentation : outline the GOAL , the BEHAVIOR that gets us to the goal , and the MEANS we'd use to do all that.
Must have strong NOMENCLATURE FOR READABILITY.

