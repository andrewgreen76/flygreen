
========================================================================================
WHAT YOU'LL NEED ... OR IMPLEMENT A CLONE OF (IF YOU ARE GAME FOR IT) :
========================================================================================

 . BIOS-like firmware 
 . EMU : an emulator w/ client-server capability (e.g., QEMU)
 . DBG : a debugging interface w/ client-server capability (e.g., GDB)
 |
 . DEPS : dependencies to install : 
 |  . Bison , Flex , etc. 
 |
 . CC  : build utilities (e.g., a version of GCC) 
 |  . ASSEMBLER - will definitely need this to convert assembly code to our bootloader's pure binary image 
 |  . linker (ELF only ?) 
 |  . loader
 |  . GCC is geared towards Unix-likes
 |  . need a variation of GCC , a cross-compiler
 |
 . BINWRK : (e.g., Binutils)
 |  . assembler (again ?) 
 |  . linker (again ?) 
 |  ? archiver ?
 |  ? objdump monitor ?
 |  . other utilities and commands (see the GNU Binutils webpage)
 |  . featured libraries for file manipulation 
 |
 . a cross-compiler <- DEPS + CC + BINWRK
    (a) build it
    (b) implement it thoroughly 


========================================================================================
WHAT YOU'LL WRITE :
========================================================================================

 . bootloader in real mode
 |  . w/ BPB to work with BIOS
 |  
 . makefile (instead of .sh)
 . a text file with some message for the bootloader to display in the emulator
 |
 . augment bootloader to protected mode
 . enable A20 


========================================================================================
PRIMAL ORGANIZATION OF SYSTEM SOFTWARE IN MEMORY : 
========================================================================================

@ 0x0 : 
 . BIOS (Data Area) 
 . IVT
 . other system data


@ 0x7c00 :
 |
 . bootstrap :
 |  . code to write BPB
 |  . GDT : descriptors : NULL , CS , DS , ...
 |  . real-mode code (outside of GDT:CS)
 |  . protected mode : prep code (outside of GDT:CS)
 |  . protected mode : inside (post-) code 
 |
 . SSBL


========================================================================================
PRIMAL ORGANIZATION OF SYSTEM SOFTWARE ON A BOOTABLE MEDIUM : 
========================================================================================

1st sector (boot sector) :
 . BPB + bootstrap
 . magic number 

2nd sector :
 . [? anything ? text ?]

_
