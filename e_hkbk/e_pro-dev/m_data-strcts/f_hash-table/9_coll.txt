
========================================================================================
THE INNATE PROBLEM WITH HASHING - COLLISIONS : 
========================================================================================

Collision :
 . a hashing algorithm produces the same hash value for two different keys (violating "pigeonholing")
 => (a) this can make lookup of information meant for one user possible by another user (unsecure database) -or- 
 => (b) -or- we have a bad spell-checker
 . How about we resolve this ? 


Solutions : whether or not key B gets hashed to a value already generated from key A , ...
 |
 |
 |
 . Method 1 : Chaining 
 |  |
 |  . lookup : 
 |  |  . once the bucket is computed , traverse the linked list at that bucket , comparing the given key
 |  |    with the key of every pair , then pull up the info/value in that node
 |  |
 |  . addition :
 |     . once an array index is computed , traverse the linked list at that index , comparing the given key
 |   	 with the key of every data struct node to make sure the given key is not used 
 |
 |
 |
 . Method 2 : Open addressing
    |
    . lookup / addition :
       . perform the operation at the next bucket 
_
