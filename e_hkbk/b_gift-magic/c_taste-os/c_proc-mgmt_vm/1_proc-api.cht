
Syscalls :
_______________________________________________________________________________________________________________________________________

Some from <unistd.h> - this library holds system calls and low-level I/O operations as well as the macros for them. 
- "These calls involve a transition from user mode to kernel mode to perform privileged operations provided by the operating system."

- open()
- read() 
- write()
- fsync()
  - Changes made to a dedicated file descriptor are stored on a storage device, ensuring persistence of changes. 
- close()
- exit() - exits in the middle of the program, returning the arg as a stat.cd to the OS 
_______________________________________________________________________________________________________________________________________

A child process : a near copy of the original (parent) process. 

- getpid()

- fork()
  - returns a value > 0, i.e., the PID of the child process within the parent process
  - returns 0 within the newly generated child process ; getpid() returns the PID of this child process
  - return a value < 0 if the process failed to generate a child 

- wait() / wait(NULL)
  - called within the parent process 
  - returns the PID of the child the parent is waiting on 
  - if the child runs first , the child will finish before the parent
  - if the parent runs first , it will wait for the child to finish 
  - this means forcing a deterministic output

- sleep(n) - idle for n seconds 



- exec()
|
- execvp()
  - transforms the current process into a different one in accord with received arguments :
    - the name of the new binary
    - the name of the source file for the transformation 
  - overwrites the original code and static (stack) data of this process' address space with those of the different program
  - reinits the address space (the heap, the stack, etc.)
  - runs this process as this new, different program 
|
|        char *newp_args[3];
|        newp_args[0] = strdup("newp.out");   
|        newp_args[1] = strdup("newsrc.c");      
|        newp_args[2] = NULL;           	     // signifies the end of array
|        execvp(newp_args[0], newp_args);     // creates and calls new prog
|
- exec() and execvp() NEVER return 



- waitpid() 
_______________________________________________________________________________________________________________________________________

pthreads (POSIX threads) : 

- pthread_create()
- pthread_join()

.