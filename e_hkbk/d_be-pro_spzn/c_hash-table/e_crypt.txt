
========================================================================
ENCRYPTION - A NEW SPIN ON HASHING : 
========================================================================

Idea : transmitting files
 . but files , requests , etc. can be tampered with
    . packet sniffing
    . man-in-the-middle attacks
    . etc. 
 => transmission must be made secure 



Idea : encryption in the form of compression :
 | 
 . need a kind of hash function for this 
 . MD5 , SHA-1 , SHA-2 

========================================================================
STIPULATIONS : 
========================================================================

 I. it has to be fast enough (to reserve the user's patience) 
    . has to be slow enough
II. there has to be an integrity check
    . use the hash code of the file being transmitted to reflect the integrity
    . one tiny change to the file should affect the hash code 
       . avalanche effect is preferred 
          . a change in the file should mean a change in the hash code , and
	    a change in the hash code should snowball as changes throughout
	    the hash code 
	  . various algorithms for achieving that 



-or- a malicious agent WILL have a good hash code


 . bit-check ; 
    . content of something can be translated to a compressed string

 . has to be difficult enough to be slowly broken   
 . collision 
    . but not too fast or a collision - coming up with the a hash code mapped to something else - will arise

========================================================================
Real-world examples :
========================================================================

 .

========================================================================
Simple , even phony example : 
========================================================================

 . 

========================================================================
WHAT IS IT LIKE , HOW DOES IT WORK :
========================================================================

 . "a data structure optimized for quick lookups"
   + an array (of "buckets")
      . yes, for a dictionary it would have to be a freaking huge array
        (hundreds of thousands , even millions of words)
      |
      |
      + collision => append the colliding node to the corresponding element in the array 
   + key-value pair(s) 
   + a hash function

              K       V          hash    i   <K,V>
           ----------------------------------------
       	    "253" , "John"   -> 95347 -> 0 | <K,V>
	     "42" , "Paul"   -> 38929 -> 1 | <K,V>
	    "368" , "George" -> 70353 -> 2 | <K,V>
	       .
	       .
	       .
=======================================================================
=======================================================================
=======================================================================
    . error / change detection

_
