
Source platform : Ubuntu Linux on x86-64 architecture , so this won't be easy to figure out. 


===================================================================================
CONFIGURING THE IDE TO WORK CORRECTLY WITH THE BOARDS : 
===================================================================================

Pain-evasive adjustments :
 . Before you even open the Arduino IDE , open the following file in an editor : 
    /home/[you_the_user]/.arduino15/packages/attiny/hardware/avr/1.0.2/platform.txt
 -> Change the "tools.avrdude.path=" to "/usr"

 -> Connect the Arduino (unconnected to everything else) to the PC with a USB cable  
 -> open the Arduino IDE

Enabling the programming of an ATtiny85 in the IDE :
 -> procure ATtiny_master board libraries
    . File > Preferences > Additional Boards Manager URLs :
      https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json
 -> Tools > Board > Boards Manager ...
 -> In the search text field type something like "attiny"
 -> Select the hit for the collection of definitions of ATtiny boards (read : support drivers for target devices)
    implemented by David A. Mellis ... and install the "boards".

Flashing external ISP programmer code onto the ATmega328P : 
 -> open the sketch for the ATmega328P bootloader within the IDE
    . File > Examples > ArduinoISP > ArduinoISP 
 -> Tools > Board > Arduino Uno 
 -> [... Serial Port : COM? / ttyACM? / ttyUSB? ...]
 -> Tools > Programmer > AVRISP mkII 
 -> Verify/Compile and Upload (the piggybacking bootloader to the upper end of the ATmega's flash ROM) 

Connecting the ATtiny85 : 
 . Make sure the console is NOT powered on 
 . Attach ATtiny85 to the ISP setup (a separate programming board or the game console itself)
 -> Connect the ISP setup to the Arduino with a SPI connection 
 . (If the console gets powered on via SPI , don't worry. Just make sure its own portable power source
    is not engaged.)

Flashing the bootloader onto the ATtiny85 : 
 -> Tools > Board > ATtiny25/45/85 
 -> Tools > Processor > ATtiny85
 -> Tools > Clock > Internal 8 MHz -OR- 16MHz (PLL) 
 -> Tools > Programmer > Arduino as ISP. (This will enable the piggybacking bootloader to be up and running.)
 -> Tools > Burn Bootloader (with internal 8MHz operation to the upper end of ATtiny's flash ROM)

 -> Download the games compatible with the 5-button circuit. 

...zzz

Flashing the game onto the ATtiny : 
 -> Choose a game sketch ... and open it in Arduino IDE 
 -> Ensure the the ATtiny85 is still the target board for the IDE
 -> When the upload is complete , disconnect the console from the rest of the setup 
 ...
 -> open the sketch of a game within the IDE
    . Sketch > Include Library > ssd1306xled > Games > Tiny[game]
 -> Verify/compile and Upload 


===================================================================================
===================================================================================
===================================================================================

. The ATmega328P will RECEIVE A PIECE OF CODE via USB and piggyback it to the ROM
    of the ATtiny85 on a separate board via a SPI connection - a 6-pin ribbon cable or individual jumper wires.
    (The practice of burning code onto the ROM of a microcontroller via a SPI cable is called ISP or In-System
    Programming.)

 -> Tools > Processor > ATmega328P 
 -> Tools > Clock > [default] 

 (-> Verify/Compile and Upload using the Programmer) 

_
