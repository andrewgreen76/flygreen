========================================================================================
AFS CLIENT-SERVER INTERACTIONS ARE MINIMIZED : 
========================================================================================

1) callback = update alert from the server :
  |
  . every cached copy has a callback on it
  -> upon write to its cached entry the client issues a Store protocol message to the server
  -> server stores the state of the file 
  -> breaks callbacks on older copies
  -> alerts other clients 
  -> OTHER CLIENTS ARE STUCK WITH THEIR OLD COPIES until they request for a flush from the server 
  -> server flushes the new state of the file to the the other client(s) 
  -> re-establishes callbacks , viewing all copies as in-sync 
  |
  . kind of like interrupts over polling  

 
 . old plan - IDENTICAL LOOKUPS OVERHEAD ON THE SERVER SIDE : 
 |  . client sends the same entire pathname for the same file to the server ... every time the file is needed  
 |  -> server is busy looking up dirs one by one before finally getting to the file ... every time that file is needed 
 |  -> server sends a copy of the master file 
 |
 |
 . new plan - CACHING THE MAPPINGS TO THE FILE ON THE CLIENT SIDE :
 |
 | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 | @@@@@@@@@@@@@@@@ Loop for every dir in path : @@@@@@@@@@@@@@@@@
 | @@@@@@@@@@@@@@@@ ---------------------------- @@@@@@@@@@@@@@@@@
 | @@ . the client fetches for dir  	   	                @@
 | @@ -> server sends dir's table				@@
 | @@ -> both sides agree on real-time callbacks for this dir	@@
 | @@-----------------------------------------------------------@@
 | @@@@@@@@@@@@@@@@ -> client app caches the fd  @@@@@@@@@@@@@@@@@
 | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 |
 |  . client does not need to re-obtain the same file for its latest state
 |  . the server will issue a callback in the event of an update from elsewhere 
 |  => client caches the file -AND- the dir tree leading to the file 
 |
 |  . subsequent access :
 |    . no pathname sending overhead
 |    . no identical lookup overhead on the server side 
 |    . in the event of a change to the state of the file the server notifies the other clients
 |    => AFS must be stateful 
 |
 . ideal for when client's targets are the same


2) sending an FID instead of a pathname 
  . volume ID  - specifies the volume within the network
  . file ID    - specifies the file in the volume 
  . uniquifier - allows for reuse of volume ID and file ID when their file is deleted 


_
