
We can't understand the nature and purpose of the assembly language without discussing the following :
 . abstraction vs. implementation 
 . legacy systems , platform specifications (requirements) 
 . compatibility modes , and backwards compatibility
 . memory management , process memory layout
 . CPU control handover between the OS kernel and the subordinate process


========================================================================================
SOURCE CODE : 
========================================================================================

	org 100h
	ret


========================================================================================
ABOUT 16-BIT SYSTEMS : 
========================================================================================

This code , written in such fashion , is meant for systems that support the REAL MODE ;
these systems perform best when supporting an operating mode that allows for processing
16-bit software and data 

x86-based 16-bit systems (which support 
the REAL MODE). They are usually 16-bit systems. 

These are also 32- and 64- bit systems that may or may not need additional software to execute
	;; 16-bit programs. 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pre- main entry directives : 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	org 100h    	; The code below (here it's just one instruction) will be
			; placed at this address - the OFFSET from the start of
			; the memory layout of the process. 
			;; 
			;; This is NOT an absolute address. 
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Memory segment : 
;
;  @   0h : Program Segment Prefix (PSP) in a DOS .COM file
;            . environment variables 
;            . other info 
;
;  @ 100h : the OFFSET within the process layout 
;           where the code segment is to be situated 
; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;; DOS kernel gives this program the CONTROL OVER THE CPU. 
	;; We start execution of the MAIN CODE of the program.
	;; We get into the main SUBROUTINE ... 
	
	ret         	; ... and we get out.
			; (This is the exit point from the main subroutine).

	;; Upon termination of this process we give control over the CPU back to the DOS kernel. 

	;; 

_
