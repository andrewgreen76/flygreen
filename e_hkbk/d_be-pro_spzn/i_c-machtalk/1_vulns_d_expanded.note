

https://www.reactive-systems.com/c-runtime-errors.html#:~:text=Typical%20memory%20errors%20include%20out,the%20use%20of%20pointers%20cast
|
is zero a negative number in c
|
https://www.quora.com/What-is-the-difference-between-+0-and-0-in-perspective-of-C

 - use of pointers cast from incorrect numeric values 



Double Free or Invalid Free: Releasing the same memory block more than once (double free) or freeing memory that was not dynamically allocated (invalid free) can result in memory corruption and crashes.

    Memory Access Errors: Incorrect pointer arithmetic or accessing memory beyond the allocated bounds (buffer overflow or underflow) can lead to memory access errors, including reading/writing to invalid memory locations. This can cause program crashes or unpredictable behavior.

    Difficulty in Memory Ownership and Lifetime Management: Tracking ownership and lifetime of dynamically allocated memory can be complex, especially in large codebases or with multiple interacting modules. It can lead to bugs and make code maintenance and debugging challenging.

To mitigate these hazards, modern programming languages and frameworks offer higher-level abstractions and automatic memory management mechanisms (such as garbage collection or smart pointers) that handle memory allocation and deallocation implicitly, reducing the risk of manual memory management errors.

