
========================================================================================
HOW TO WRITE YOUR OWN INTERRUPT : 
========================================================================================

 (1) check out the IVT


 (2) pick an offset / CS:IP (ideally one that isn't used/duplicated) 
     . figure out its offset
     -> convert hex offset to decimal
     -> convert the offset to interrupt vector in decimal 
     -> convert the interrupt vector to hex ; that will be your int_vector 


 (.) write your own interrupt service handler as a routine separate from the main code 
     . write the body of the routine under its own label in your source code 
     . end it with `iret` 


 (.) change the CS:IP under the chosen offset to the location of your own handler : 
     |
     . the label will signify {the address of the first instruction of your handler =
     |  = address of your handler}
     |
     -> mov [0xUV] , int_handler_label		; This changes the IP.
     -> mov [0xUV+2] , cs			; This changes the CS.
     	    	       				; The handler code is always written into our
						; custom code segment. 


========================================================================================
IRET 
========================================================================================

 . the idea is to be able to return from an interrupt call
 => `iret` is at the very end of every ISR
 . restores the process state (by restoring flags + CS:IP)


 . "`iret` returns from an interrupt service routine by restoring the CPU state, including
    flags and segment registers, while `ret` returns from a subroutine without restoring
    interrupt-specific states."

_
