======================================================================================================
JOURNALING AND RECOVERY (A to Z) : 
======================================================================================================

  . ATOMIC LOG OF TRANSACTION :
    | . transaction descriptor block
    | . intended write-ops
    |   + "undo logging" (to secure INITIAL SAFE STATE)
    |	  ( i) inverse write-ops - for reverting (or "rolling back") changes
    |	  (ii) initial state of FS is saved to the journal
    |   + write checkpoints (key progress points in the journal to help expedite potential replay)
    | . target inodes
    | . target bitmaps/locs
    | . target data blocks 
       
 -----------------------------------------------------------------------------------------------------       
 -> ATOMIC LOG OF COMMIT BLOCK
     . all ops have been recorded
     . ready to update target data blocks     
 -----------------------------------------------------------------------------------------------------
 -> WRITE TO DISK 
     ...
     . transaction checkpointed (marked as completed) -> [JS-block] 
       		   			   	      -> [journal descriptor / commit block]
 -----------------------------------------------------------------------------------------------------
 -> DEALLOCATE THE TRANSACTION BLOCK 
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! [ CRASH / OUTAGE ] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 -----------------------------------------------------------------------------------------------------
 -> RECOVERY - ANALYSIS :
     . FS will track completed and not-completed write-ops

 -> RECOVERY - DECISION AND ACTION : 
      . depends on the design
      . depends on the stage to completion
      . depends on the transaction commit status 
     (a) checkpoint NOT reached => FS will roll back (revert) to the old state 
     (b) checkpoint reached , finish line not reached => FS will roll back to last checkpoint
     	 . "redo" logging for retrying (or "replaying") changes
     (c) finish line reached 	 => FS will replay (re-enact) the logged operations and commit the changes
     	  . a.k.a. redo logging
_
