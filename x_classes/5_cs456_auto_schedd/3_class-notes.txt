=========================================================================================================================================================
Essence : 
=========================================================================================================================================================

 . Discussing ideation of machines that can do at least one thing 

=========================================================================================================================================================
Flash cards for the class : 
=========================================================================================================================================================

It's all about following a pattern. 

Alphabet (E) :
 . a finite set of symbols , elements that make up a string
 . E = {symbols}
 => E = atoms 

E* = ALL POSSIBLE STRINGS "OVER" THE ALPHABET.
 => all possible molecules
 . * - all

Language (L) :
 . any SUBSET of E* 
 . some molecules

Formal language :
 . a certain type of language (subset)
 . the automaton follows a certain rule / pattern / behavior 
 . formal language = results of a formula 

Automaton :
 . an abstract for a machine
 . does one thing and one thing only - following a pattern 
 . attached are :
    . language - formulated resultant strings 
    . grammar - 
    . expressions 

Automata theory : 
 . a study of "abstract machines and their computational capabilities"
 . ... abilities to follow patterns 

============================================================================================================================================================
============================================================================================================================================================
============================================================================================================================================================

String :
 . a series of symbols 

Power set :
 . subset of the set + empty + the set itself
 . the ultimate set 

Set equality problem :
 . Do the two (unordered) sets contain the same elements ? 

Set theory :
 . a study of sets
 . theory = study

Proof : 
 . proves whether a machine can determine/compute certain things 
    . proves that if a human can determine/compute certain things , so can the machine 
    . (efficiency and inherent limits of the computation) 

Set theory proof :
 . proof concerning sets 

Theory of computation :
 . study of algorithms and automata 
 => study of determining machines and solutions
 => study of problem-solving machines 
 . Machine's capabilitiy : What can be computed with this machine ? 

Proof by induction :
 . recursive proof (base case and generic/inductive step)
 . You get a formula ? (Arithmetic series formula.) 
 . ex. : sum of first n positive integers
    . 0 is not a positive integer 
    . n=1 => n(n+1)/2 => 1         = 1 = sum of first n=1 positive integers - 1 
    . n=2 => n(n+1)/2 => 3         = 3 = sum of first n=2 positive integers - 1+2
    . n=3 => n(n+1)/2 => 3(2)      = 6 = sum of first n=3 positive integers - 1+2+3
 . PROVE THE BASE CASE 
 . PROVE THE INDUCTIVE CASE 

Grammar :
 . generates strings
    . randomly or follows a formula ? 
 . a -> n>=1
    . ???
 . regular grammar : ??? 
||
(Formal) language :
 . a set of strings
 . ALL STRINGS ARE FINITE 
 . a -> n>=1
 . grammar for a machine 
    . accepts strings 
 . question that needs to be answered
 . regular language :
    . DFA/NFA (deterministic finite acceptor) 
 . FSM (finite state machine)
 . infinite language :
    . has an infinite number of strings 
||
Automaton :
 . a machine that accepts strings 
 . model of a device
 . adding memory
 . are all machines Turing machines ? 


Computability : 

========================================================
========================================================

Complexity |	regular language	~	dfa/nfa machine			~		regular grammar		~	regular expressions
	   	 . ??? cannot be infinite	 . accepts strings				 . 
						 . no memory (cannot remember strings)
						 . for simple problems with cheap solutions 
						 
	   |	context-free		~	pda (push-down automata)	~		context-free grammar	~	-
	   	 . can have 			 . adding to smth. like a stack			 . more rules 
	   					 . additional memory - stack
						 . one infinite stack
						 => can match characters ( {} )
						 
	   |	context-sensitive	~	lba (linear-BOUNDED automata)			context-sensitive grammar
	     	 . more complex 		 . list-like memory
		   				 . more capabilities with LBA
						 . one infinite list/array			

	   | 	recursive /		~	tm (Turing machine) 				unrestricted grammar 
	        recursively enumerable		 . unlimited memory
			    			 . programmable 

	   v


========================================================
========================================================

Set theory proofs :
 . prove that a is b and b is a

Propositions :
 . implications (p implies q and q implies p) 

========================================================
========================================================

Proof by contradiction : 
_
