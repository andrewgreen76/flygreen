
    processes (w/ segments) 
   /
RAM
   \
    GDT (data structure w/ info {base,lim,perms} about segments)	<- seg selector (offset of GDT) 

    |
    v

    address of a specific segment descriptor 
    

========================================================================================
SHAPE AND PURPOSE OF GDT : 
========================================================================================

 . Global Descriptor Table 
 . data structure
 . every entry - a segment descriptor (base , size , perms of the segment) 
 
 . "The Global Descriptor Table (GDT) is a DATA STRUCTURE in x86 architecture
    that STORES SEGMENT DESCRIPTORS, providing memory segmentation information
    such as BASE ADDRESS, LIMIT, AND ACCESS PERMISSIONS FOR MEMORY SEGMENTS
    used by the CPU."

 ! PROCESSES USE GDT TO FOLLOW THE SYSTEM'S RULES OF HARDWARE PROTECTION AND MEMORY PROTECTION. 

 . "Processes share the same Global Descriptor Table (GDT), which contains
    segment descriptors accessible to all processes, rather than having their own
    dedicated GDTs." 

 . "Processes are allowed to access the Global Descriptor Table (GDT) because
    the GDT provides necessary segment descriptors for memory management, while
    the kernel enforces strict access rights and controls to prevent unauthorized
    modifications, ensuring system stability and security."

 . "Processes need segment descriptors from the Global Descriptor Table (GDT)
    to define their memory segments, access rights, and privilege levels, enabling
    proper memory management and protection during execution."

 . "Processes use memory segments to organize and access data and code, access
    rights to enforce security and permission boundaries, and privilege levels
    to determine the operations they can perform within the system's memory
    management framework."

 => Processes use GDT to follow the system's rules of hardware and memory protection. 

_
