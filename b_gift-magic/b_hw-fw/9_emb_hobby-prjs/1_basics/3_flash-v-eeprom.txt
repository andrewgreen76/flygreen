
===================================================================================
(SPI) FLASH MEMORY vs. EEPROM - APPLICATIONS (PROS AND CONS) 
===================================================================================

Flash : 
| . faster read/write time 
| => memory is quickly overwritten only in large blocks , which is ideal for writing an entire program quickly to a chip 
| . fast execution of code
| . fast block-rewrite , but that means that the resident program would have to be written in again
| => stores binary code to define the microcontroller's behavior 
|
EEPROM :
| . expected to have way more read/write operations , "EEPROM has a higher endurance for write/erase cycles" 
| . ability to overwrite individual bytes (when the rest of the bytes of data could be reused) 
| . relatively slow ; takes time to read/write a specific data byte
  |
  . "... still has a finite number of cycles (typically in the range of 1 million), so while it handles frequent
     writes better than flash, it can still degrade over time with excessive use."
  => stores data - specifically "configuration settings, user preferences, ... , calibration data, last-used states,
     device IDs, threshold values, or flags indicating certain conditions** that need to be retained across power cycles."
  . "... if you need to change the data stored in the EEPROM, you would typically do it by modifying the program
     (binary code) on the flash memory to include the logic for updating the EEPROM contents during runtime."
  . SRAM stores temporary data - stack variables 


===================================================================================
(SPI) FLASH MEMORY vs. EEPROM - PROGRAMMING 
===================================================================================

Flash :
 . "The **USB-to-serial adapter** or **Arduino bootloader** is used to program the flash memory of an Arduino MCU
    with code from the Arduino IDE, typically via a USB connection, which communicates with the microcontroller's
    serial interface to transfer the compiled program."

EEPROM :
 . "User settings and preferences make their way into the EEPROM of an Arduino MCU by using specific **EEPROM
    library functions** in the Arduino code (e.g., `EEPROM.write()` and `EEPROM.read()`) to store and retrieve
    data at specified memory addresses in the EEPROM, allowing it to persist between power cycles."


===================================================================================
(SPI) FLASH MEMORY vs. EEPROM - TECHNOLOGY 
===================================================================================

They are structured differently. 

Flash :
 . floating-gate MOSFET memory cells
 . one transistor per bit
 . an entire block of cells (code) can be erased 

EEPROM :
 . floating-gate MOSFET memory cells 
 . two transistors per bit
 . second transistor allows for memory location addressability (i.e., of individual pieces of data) 


===================================================================================
===================================================================================
===================================================================================

"
The key difference between **flash memory** and **EEPROM** is that **flash memory** is typically organized in blocks that must be erased before being rewritten, while **EEPROM** allows individual bytes to be erased and rewritten independently.
"


"
The **ATmega328** has both **flash memory** and **EEPROM** to provide a balance between high-speed, large-capacity storage for program code (flash memory) and non-volatile storage for small amounts of data that need to persist across power cycles (EEPROM).
"
_
