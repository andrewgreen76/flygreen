
OS services : file ops, syscalls, proc mgmt, etc. 



"
The `unistd.h` header file is part of the C Standard Library and is commonly used in Unix and Unix-like operating systems (including Linux). "unistd" stands for "Unix Standard." This header file declares a variety of functions and constants that provide access to various operating system services.

Here are some common functionalities provided by `unistd.h`:

1. **File Operations:**
   - Functions like `read`, `write`, `open`, `close`, and `lseek` are used for basic file input/output operations.

2. **Process Management:**
   - Functions like `fork`, `exec`, `exit`, `getpid`, and `getppid` are used for process creation, execution, and termination.

3. **System Calls:**
   - The `syscall` function allows direct invocation of system calls.

4. **Symbolic Constants:**
   - Constants like `STDIN_FILENO`, `STDOUT_FILENO`, and `STDERR_FILENO` represent standard input, standard output, and standard error file descriptors, respectively.

5. **File Descriptors:**
   - The `close` function is used to close a file descriptor, and `dup` and `dup2` are used for duplicating file descriptors.

6. **Path Resolution:**
   - Functions like `chdir` and `getcwd` are used for changing the current working directory and getting the current working directory, respectively.

7. **Environment Variables:**
   - The `getenv` function retrieves the value of an environment variable.

8. **System Identification:**
   - Functions like `gethostname` and `getpid` provide information about the system and process IDs.

Here's a simple example that demonstrates the use of `unistd.h` for basic file I/O operations:

```c
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    const char* message = "Hello, Unistd!\n";

    // Write to standard output (file descriptor 1)
    write(STDOUT_FILENO, message, sizeof(message) - 1);

    // Open a file for writing
    int fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0666);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Write to the file
    write(fd, message, sizeof(message) - 1);

    // Close the file
    close(fd);

    return 0;
}
```

In this example, the program writes a message to standard output (console) using the `write` function and then opens a file ("output.txt") and writes the same message to the file. Note that error handling is included to demonstrate how to check for errors when using functions from `unistd.h`.
"

.