
"
A process list (or a task list) is used to store the states of all of the processes. (An operating system is similar to any other computer program. It uses data structures to keep track of important information.) It includes : 
- The processes that are ready
- The processes that are running
- The processes that are blocked
- When I/O events finish 

The task list is one of the simplest data structures, but it is not required. An OS can run applications without this list. 
____________________________________________________________________________

// the registers xv6 will save and restore
// to stop and subsequently restart a process
struct context {
  int eip;
  int esp;
  int ebx;
  int ecx;
  int edx;
  int esi;
  int edi;
  int ebp;
};

// the different states a process can be in
enum proc_state { UNUSED, EMBRYO, SLEEPING,
                  RUNNABLE, RUNNING, ZOMBIE };

// the information xv6 tracks about each process
// including its register context and state
struct proc {
char *mem;                  // Start of process memory
uint sz;                    // Size of process memory
char *kstack;               // Bottom of kernel stack for this process
enum proc_state state;      // Process state
int pid;                    // Process ID
struct proc *parent;        // Parent process
void *chan;                 // If !zero, sleeping on chan
int killed;                 // If !zero, has been killed
struct file *ofile[NOFILE]; // Open files
struct inode *cwd;          // Current directory
struct context context;     // Switch here to run process
struct trapframe *tf;       // Trap frame for the current interrupt
};
____________________________________________________________________________

Register context : 
- When the OS stops a process, the state of the process is stored in the register context. 
- If the OS wants to continue the process, it uses the register context to restore the information back into physical registers.
____________________________________________________________________________

// the different states a process can be in
enum proc_state { UNUSED, EMBRYO, SLEEPING,
                  RUNNABLE, RUNNING, ZOMBIE };
____________________________________________________________________________

A process can have an initial state when it is built. The operating system can terminate a process, but not clean it up. The end state of a process allows other processes to verify the OS has properly terminated the process. UNIX-based systems usually use 0 to represent successful completion of a task and non-zero numbers to represent an unsuccessful completion.



While a process list keeps track of all processes, the Process Control Block (or PCB, or a process descriptor) is used to keep track of a specific process. 
. process state (registers' values) 
. priority 
. scheduling information 
"
.