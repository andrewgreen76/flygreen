
The main goal of any OS is to maintain security between regular processes and system-critical operations.
. It works with hardware to achieve its security goals. 


"
... operating systems need to keep users from killing the processes of other users to maintain usability and security.

There needs to be a hierarchy of users where certain users are granted more privileges than others. Having the ability to give trusted users more power will keep bad actors from abusing the system.

At the apex is the superuser (sometimes called root). This user does not have any restrictions, which gives them tremendous power. With this power comes the ability to do harm as well. Access to this user should be highly restricted to increase security.
"

=========================================================================================================================
=============================================== USER MODE and KERNEL MODE ===============================================
=========================================================================================================================

The USER MODE and the KERNEL MODE
. exist to segregate user-inspired requests and the system-critical operations.
. in the user mode you can't carry out your own requests like I/O operations ... unless you make a system call
. system calls (e.g., read(), open(), exit() ) are user mode requests for privileged operations from the kernel
. privileged operations include : 
  . working with a file system		/dev , /lib , etc. 
  . manipulating processes 		./ -or- SIGTSTP -or- SIGINT
  . talking to processes		signal() -or- argc/argv
  . setting aside more memory 		malloc() , free() , etc.
|||
. C library functions (e.g., malloc() ) are NOT system calls. 

=========================================================================================================================
========================================================= TRAPS =========================================================
=========================================================================================================================

Trap :
.  for a privileged operation to be carried out, the process must issue a special instruction called a trap to the kernel
-> the process with the trap gain the kernel mode 
-> the kernel serves the process
-> the kernel issues a return-from-trap instruction to the process
-> the process regains the user mode
|
. A trap table is used by the kernel to keep track of what code the process can, cannot, and is trying to access.
  . created at boot time



Reminder : The kernel on the RAM and the rest of the hardware work together for the sake of security.
. The kernel shares trap handlers with the hardware so that they all know what to do when a process makes a request. 

.