
HDL impl of ROM+CPU+RAM <- bin.exe (grb<ascii) <- assembler <- .asm
    	    ins ALU mem	   1110111001011011   	  parser       D-1;JGE
	    	regs	   			  
	Let this one do the jumping.
					Who's doing the rd/wr addr.?



It's the programmer who can introduce inanities like '@weight \n D-1;JNE' or '@LOOP \n M=32'
|
IPTR to cur.instr.

======================================================================================================================
BIN PROGRAM INSIDE OF ROM32K : 
======================================================================================================================

labels of var.size -> label table of ?var.size? -> ?LOC/LINE IN .ASM AS DEST FOR IPTR?
- Gen. scenario (label.def, then label.use) :							
  - label.def -> asmr figures out the addr. of the 1st instr. under the label -> label-table	
- Worst-case scenario - forward reference (label-use, then label-def) :       	 		  	     
  - build the LABEL TABLE (1) , 1st pass thru .asm :
    - account for each label.def/subseq. instr. line -> label table (1)
      	      	       			   - 2nd pass : replace every procd label with a bin.val (from table) in the bin.file 


    	high-level table (used by us, not asmr)
	[ label LOOP | numOfLineImpl? ]		// No dual-use of val?
	  	       @4(ofROM)   0...00100 	// PC takes care of that.
		       Actionable how ? : the pre-PC load functionality decides whether to jump or not.


Sym.table :
(after the 1st pass)
LOOP	  |	0000000000001100	// (@12 of ROM) 


ASM:		   	      Expected:  	      	  A/PC business :
(after the 1st pass)
@LOOP	mpd to ROM	      0000000000001100 		  @12 of ROM 
M-D;JEQ	       		      1111xxxxxxxxx010		  ld=1 => PC=A => JUMP -or- ld=0 => PC=/=A => PC++ 

======================================================================================================================

variables of var.size -> variable table of ?var.size? -> find avail.mem.addr (?malloc?) -> variable-table
- on the 2nd pass 

	     	    0->15 taken
	  [ var  | 0010RAMaddr10110 ]
	   weight  0000000000010000
		   @16(ofRAM)
		   Actionable how ? : the AM/ALU-block performs a look-up.


Sym.table :
(var. lookup, alloc. if not there)
weight	  |(populate)|	0000000000010000


ASM:		   	      Expected:  	      	  AM/ALU-block: 
@weight	mpd to RAM	      0000000000010000 		  (A-reg -> addrM)
(Assume all vars have vals before comp.)
M=D	       		      111xxxxxxxxxxxxx		  (ALU -> outM)

======================================================================================================================
ROM :				sym.table :			CPU behavior			Expected programmer's treatment :
    					  			    				

Loading flag-instr.: 												
@SCREEN (RAMaddr)		SCREEN | A=01000..00(by def)	A->addrM , 			
M=-1				-      	 			ALUout->outM 			<-


Jumping flag-instr.
( for PC=A(ln@height) ) : A<-...
//
@LOOP				LOOP | A=00..010(final run)	CPU/PC->ROM->CPU 
D-1;JNE				       		     		111..101
means smth to the asmr
//
(LOOP)				-> decl found			CPU/PC->ROM->CPU : 111..101
ln @height (ROMaddr)		->LBL|ln@(1st pass)		//
					

@weight (RAMaddr)		(2nd pass ; final run)						Treat it like a variable. 
				(asmr replaces sym w/ bin A val.)
				weight | A=0RAMaddr00		A<-0..10000
				       	 		  	A->addrM
				       
M=D				-				D-reg->ALUout->outM w/ addrM,	<-
-or-
D=M				-				RAMout/inM->D-reg.		<-


======================================================================================================================

Conclusion :
- the job of the asmr :
  - translating, NOT processing
    - init ONE symbol table w/ : 
      - pre-defined symbols
      - 1st pass : populate all the LABELS(decld @) and the corresponding @'s (instrxn count)
      - 2nd pass : populate all the variables
    - get to translating the .asm 
  - 1st pass - labels :
    - searching label.defs, adding to sym.table, designating @#um(A's/lines)->bin of instrxns for future PC=A jumps 
      - (The CPU/PC->ROM will take care the "IPTR" jumping. The asmr just performs the translation to Abin for ROM.) 
  - 2nd pass - vars :
    - looking up + allocation (reg'ing var + reg'ing next unreg'd RAM addr (16+) in the table)
  - main loop : finally translating : looking up + subseq. replacing 	 LABELS with ROM addr 	    -AND-    var. with RAM addr.
    - (the CPU+RAM will take care of RAMaddr->value ref'ing)
    - when from.asm:@const, then to.bin:00..1010
  - deleting the sym.table 
   
WRITE A PSEUDOCODE. 

.