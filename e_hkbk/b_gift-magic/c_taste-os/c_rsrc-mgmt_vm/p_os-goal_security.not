
"
... operating systems need to keep users from killing the processes of other users to maintain usability and security.

There needs to be a hierarchy of users where certain users are granted more privileges than others. Having the ability to give trusted users more power will keep bad actors from abusing the system.

At the apex is the superuser (sometimes called root). This user does not have any restrictions, which gives them tremendous power. With this power comes the ability to do harm as well. Access to this user should be highly restricted to increase security.
"



The USER MODE and the KERNEL MODE exist to segregate user-inspired requests and the system-critical operations.
. i.e., in the user mode you can't carry out your own requests like I/O operations ... unless you make a system call
|
+ System calls (e.g., read(), open(), exit() ) are made in the user mode to request privileged operations from the kernel.
|
. Privileged operations include : 
  . working with a file system		/dev , /lib , etc. 
  . manipulating processes 		./ -or- SIGTSTP -or- SIGINT
  . talking to processes		signal() -or- argc/argv
  . setting aside more memory 		malloc() , free() , etc.
  |
- C library functions (e.g., malloc() ) are NOT system calls. 

.