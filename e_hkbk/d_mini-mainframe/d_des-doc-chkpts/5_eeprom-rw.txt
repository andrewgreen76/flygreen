
########################################################################################
########################################################################################
#####		    FIRMWARE EEPROM - PROGRAMMING AND READING METHODS		   ##### 
########################################################################################
########################################################################################

 . modeled after the Ben Eater design

========================================================================================
REJECTED METHODS :
========================================================================================

 |
 - no microcontroller (e.g., Arduino Nano) involved - the lead designer/engineer does not
 | know how to design and fabricate a microcontroller at home
 |
 - no DIP-switches - working with these has a cumbersome feel to it , so we want something
 | more convenient
 |
 - no program hardwiring on a medium (breadboard). Original plan : 
   . clock-driven/automated EEPROM reading/writing 
   . constantly scrolling address to address , clock dialed to max speed for fast scroll
     to virtualize simultaneous read from all addresses
   . address-scrolling mechanic :
     . akin to feeding counter output to the control logic stepper 
     . would need N demux-output-lines to display all N instruction words within EEPROM
     . would need N * 8 LEDs to accomodate display of all the words 
     => not feasible 


Methods under consideration : 
 + (a) button switches 
 + (b) two-way position switches (flick-push-set) 


 . EEPROM address/code/data lookup (instant read) :
 | . need Read mode on (~OE low , ? ~WE high ?)
 | . MAR - for reading the address itself 
 | . MBR - for reading the word at that address 
 | . key switches - for paging from address to address while also peeking words 
 |   . prev (rollover past 0x0) 
 |   . next (rollover past last address in EEPROM) 
 |
 |
 . EEPROM "write" :
 |  .  need Write mode on (? ~OE high ? , ~WE low)
 | (1) manual programming of the master EEPROM word-for-word 
 |     . S-R two-way switch for every bit (8 switches per word) 
 |     . button : set-all 	
 |     . button : clear-all 
 |     . button : copy-toggles-to-MBR 
 | (2) automated program copy from src_EEPROM (A) to dest_EEPROM (B) 
 |     . key switches
 |     . the master copy is saved and can be replicated multiple times 
 |
 |
 . automating the program write - ideas :
   . breadboard for holding hardwired machine code (can start off with random binary values) 

_
