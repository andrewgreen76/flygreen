
========================================================================================
APPLICATIONS :
========================================================================================

Private situation :
 | 
 . bank database 
    . (unique , private) key -> QUICK LOOKUP (of an entry in a database)
    | 
    . need a hash function (hashing algorithm) 
       . key -> hash code -> array index -> data set
       . key = unique number of any basis
    . HAS TO BE FAST 
       . O(1) , or 1:1
    . has to be difficult enough to maximize breaking time
       . otherwise , a hacker can generate a valid hash code soon enough 

.) encryption
    . or just data compression 
    . need a different kind of hash function
    . MD5 , SHA-1 , SHA-2 



Non-sensitive situation :
 | 
 . a word dictionary (disk -> RAM)
    . word -> QUICK LOOKUP (of an entry in a file)
    |
    . take a KEY (unique string or number of any basis)
    -> HASHING ALGORITHM : compute a (hopefully) unique hash code
    -> MODULO OPERATOR : compute the corresponding index 
    -> located bucket with the key (input) and the value ("output")
    . one and the same number of steps => O(1) 
 |
 . entry generation -> structure growth
    . key -> hash code -> array index -> data set

========================================================================
STIPULATIONS : 
========================================================================

 . bit-check ; 
    . content of something can be translated to a compressed string
    . avalanche effect (various algorithms) 
 . has to be fast enough to get through security    - to accommodate patience
 . has to be difficult enough to be slowly broken   - the malicious agent WILL have a good hash code  
 . collision 
    . but not too fast or a collision - coming up with the a hash code mapped to something else - will arise

========================================================================
Real-world examples :
========================================================================

 .

========================================================================
Simple , even phony example : 
========================================================================

 . 

========================================================================
WHAT IS IT LIKE , HOW DOES IT WORK :
========================================================================

 . "a data structure optimized for quick lookups"
   + an array (of "buckets")
      . yes, for a dictionary it would have to be a freaking huge array
        (hundreds of thousands , even millions of words)
      |
      |
      + collision => append the colliding node to the corresponding element in the array 
   + key-value pair(s) 
   + a hash function

              K       V          hash    i   <K,V>
           ----------------------------------------
       	    "253" , "John"   -> 95347 -> 0 | <K,V>
	     "42" , "Paul"   -> 38929 -> 1 | <K,V>
	    "368" , "George" -> 70353 -> 2 | <K,V>
	       .
	       .
	       .
=======================================================================
=======================================================================
=======================================================================
    . error / change detection

_
