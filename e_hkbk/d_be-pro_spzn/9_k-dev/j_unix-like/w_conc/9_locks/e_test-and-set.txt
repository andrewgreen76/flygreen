
Evolution of atomicity enforcement mechanisms :


======================================================================
Old idea : 
======================================================================
> disabling interrupts on all CPUs -and- 
> regulating threads in the critical section with loads/stores of the barring flag value alone
- trusting other threads : 
  - (no) async handling of interrupts by multiple threads/processes 
  - (no) losing interrupts 
  - (no) excessively long lock-outs  
  - (no) bad behavior like inducing spinning 
    - (no signal to other threads , unattended barring flag)
  - liberal masking
    - overhead , increased by the number of CPUs 


======================================================================
New ideas :
======================================================================

> mutex + condition variable 

> locking hardware support
  . used in single- and multi-processor systems today
  |
  |
  |
  . test-and-set (a.k.a. atomic exchange)
    . the most direct form of locking hardware support
    . AN ATOMIC OPERATION 
    |
    . a system that employs only A SINGLE CPU does not have multiple processes/threads running completely independently
      => a preemptive scheduler (one that works the timer interrupt) is needed to secure context switching
      => threads attempting to acquire the lock will line up at the spinlock , get their CPU time share , and waste it on waiting
    |
    . in a system that employs multiple CPUs (assuming every thread gets its own CPU) :
      . If Thread A on CPU 1 acquires the lock and Thread B on CPU 2 spins on it , CPU 1 time will not be wasted on Thread B , 
      	and Thread A gets to finish sooner. 

_
