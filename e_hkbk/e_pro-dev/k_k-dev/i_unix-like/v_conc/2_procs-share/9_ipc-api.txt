"
Certainly! Here are examples of IPC (Inter-Process Communication) mechanisms in C, including examples of using piping, redirection, and other IPC APIs:

1. **Pipes:**
   - Pipes are created using the `pipe` system call, and they allow one-way communication between processes. Here's a simple example:

    ```c
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>

    int main() {
        int pipe_fd[2];
        char buffer[50];

        if (pipe(pipe_fd) == -1) {
            perror("pipe");
            exit(EXIT_FAILURE);
        }

        if (fork() == 0) { // Child process
            close(pipe_fd[1]); // Close write end
            read(pipe_fd[0], buffer, sizeof(buffer));
            printf("Child received: %s\n", buffer);
            close(pipe_fd[0]);
        } else { // Parent process
            close(pipe_fd[0]); // Close read end
            write(pipe_fd[1], "Hello, child!", 13);
            close(pipe_fd[1]);
        }

        return 0;
    }
    ```

2. **Redirection:**
   - Redirection involves using file descriptors to redirect input or output. For example, the `dup2` system call can be used for redirection:

    ```c
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>

    int main() {
        int file_desc = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
        dup2(file_desc, STDOUT_FILENO);

        printf("This will be written to output.txt\n");

        close(file_desc);
        return 0;
    }
    ```

3. **Message Queues:**
   - Message queues are created using the `mq_open`, `mq_send`, and `mq_receive` functions. They provide a way for processes to exchange messages:

    ```c
    #include <stdio.h>
    #include <stdlib.h>
    #include <mqueue.h>

    int main() {
        mqd_t mq;
        struct mq_attr attr;
        attr.mq_maxmsg = 10;
        attr.mq_msgsize = 20;

        mq = mq_open("/example_queue", O_CREAT | O_RDWR, 0666, &attr);

        mq_send(mq, "Hello, message queue!", 20, 0);

        mq_close(mq);
        mq_unlink("/example_queue");

        return 0;
    }
    ```

4. **Shared Memory:**
   - Shared memory is created using the `shmget`, `shmat`, and `shmdt` functions. Processes can communicate by sharing a common memory segment:

    ```c
    #include <stdio.h>
    #include <stdlib.h>
    #include <sys/shm.h>

    int main() {
        key_t key = ftok("/tmp", 'A');
        int shmid = shmget(key, 1024, IPC_CREAT | 0666);
        char* shared_memory = (char*)shmat(shmid, NULL, 0);

        sprintf(shared_memory, "Hello, shared memory!");

        shmdt(shared_memory);
        shmctl(shmid, IPC_RMID, NULL);

        return 0;
    }
    ```

5. **Sockets:**
   - Sockets can be created using the `socket`, `bind`, `listen`, `accept`, `connect`, `send`, and `recv` functions. Here's a simple example of a TCP server and client:

    ```c
    // TCP Server
    // ...

    // TCP Client
    // ...
    ```

These are just a few examples, and there are other IPC mechanisms such as semaphores, signals, and more. The choice of IPC method depends on the specific requirements of the communication between processes.
"
_
