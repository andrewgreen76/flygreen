
Abstraction : the practice of hiding implementation (coded details of something more "micro-scopic", i.e., details on a deeper level) from developers who work on more general designs and implementation ; they do not need to be exposed to and bothered with the details of your implementation.

Design : a "spelled-out" blueprint for a piece of hardware or software for a project. 

Modularity : the ability to delegate a task from a shared scope or file to a separate one.

Implementation : code that follows the details of a higher design. 

Construct : a key feature in a programming language that defines its characteristic.
- e.g., for- and while- loops are constructs in object-oriented programming languages like C++. 

Software suite : a collection of applications that aid in solving design and/or implementation problems. 

Artifact (esp. in graphics) : a side effect presenting itself as a problem stemming from a solution to another problem. 

Unit testing : The practice of keeping the implementation of a hardware unit, like a designed and implemented chip, separately from the rest of the project until that unit is refined and can be integrated into the project. 

