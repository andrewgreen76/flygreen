
 . typedef struct abracadabra_fullthing {..};
 . abracadabra_fullthing abra_thing; 


===================================================================================
SUGGESTION - UNDERSCORE ECONOMY 
===================================================================================

Use '_' (underscore) if it helps. The question is : Will it help others
  without making an overwhelming identifier ? 


===================================================================================
SUGGESTION - EXPAND-LAST-COLLAPSE-OTHERS - TO QUICKLY BRING ESSENCE INTO FOCUS :
===================================================================================

Ex. : 
 |
 . typedef struct {} iccprocess;
 |
 . except : inciC
 . except : ICC - more preferable than "iccompiler"  


===================================================================================
SUGGESTION - UNDERSCORE TO QUICKLY BRING ESSENCE INTO FOCUS :
===================================================================================

You can use '_' to separate the ending noun from the rest of the identifier.


 . [..] spec_thing [..]
 v struct cc_proc {};
 x struct ccproc {};


 . [..] thing_spec [..]
 . void * block_moved = move_block();


===================================================================================
Suggestion - keep typenames SHORT and object names SHORTER :
===================================================================================
Suggestion - keep typenames and object names CLEAR :
===================================================================================
Suggestion - have var/arr/ptr/obj names reflecting the datatype :
===================================================================================
Suggestion - underscores in typename , no underscores in var/arr/ptr/obj :
===================================================================================

Do not rely on datatypes for understanding identifiers. Identifiers look lost
  in the code that being read , even by you. 

Though datatypes can help with understanding the identifiers , I'd have
  to think that it's still good practice to give clear , descriptive names
  to variables , arrays/pointers , and structures , especially to the eyes
  of someone new to your code. 


Ex. : 
  //
  struct ccprocess * ccproc1;
  //
  x ccp1 = ccp0;
  v ccproc1 = ccproc0;


Ex. :
  // 
  typedef struct {..} iccprocess;
  iccprocess iccproc;


===================================================================================
===================================================================================
===================================================================================

===================================================================================
Minor suggestion - consistency between related identifiers :
===================================================================================

It is also ideal to have consistency in your identifiers. It would certainly
  make for easier reuse and modification of the code. This applies to underscore
  positioning , the type of case you are using (CamelCase or snake_case) , etc.  


Ex. :
  v struct ccproc * ccpr = ccproc_create();
  x struct cc_proc * ccpr = ccproc_create();


_
