
The idea : 
. global static "counter" variable starts at 0 
. the program is to create two threads that would increment the counter variable a total of 20,000,000 times 
  (10,000,000 incrementations by each thread) 
. Problem output : The counter variable ends up being less than 20,000,000 and it's different every time. 


This program presents a case of a race condition :
. two processes or threads "racing" with one another while working with the same data 
. here - data race : allowing two or more threads share the same global volatile variable (open to all) 
  . "the outcome is dependent on the code execution timing" 


Critical section : 
. a block of code with access to shared data , and is therefore to be executed from start to finish by only one thread at a time


Mutual exclusion (a.k.a. mutex) : 
. a mechanism that allows only one thread to work on a critical section at a time , barring all the other threads until the job is done


Indeterminate program :
. contains one or more race conditions
=> the output varies 
=> the outcome is not deterministic, "something we usually expect from computer systems".
_
