
Limited direct execution :			| KERNEL			HW			PROGRAM
	       		 			|
================================================+===========================================================================
						|	BOOT TIME 
================================================+===========================================================================
						|
						| init_trap_table()
						|				
						|				mem addr of
						|				syscall handlers
						|
						| init_timer-int()
						|
						|				start_timer-int()
						|				stop_in_ms(x)
						|
================================================+===========================================================================
						|	RUN TIME 
================================================+===========================================================================
						|
- adds the program to the process list		| insert(new_prog)
- allocates memory for the program 		| malloc(new_prog)
- loads the program into the memory 		| disk -> code/data bytes -> RAM
| 	    	    	     			| 
- locates the program's entry point 		| > main() 
| - sets us the stack with argc and argv	| push(argc, **argv)
| - clears registers  	   	    		| 
    	   					| 
						| mv regs/PC to kernel-stack
						| return .. from trap; }
						| 
						| 				kstk.pop(a_regs/PC)
						| 				mode = USER_MODE
						| 				jmp main()
						| 
- runs the program 	      			| 
+>						| 							run main() {
						| 							  ...
						|
						|				stop_timer-int(1)
						|				kstk.push(a_regs)
						| 				mode = KERNEL_MODE
						| 				jmp trap_handler()
						| 
						| trap {
						|   switch() {
						|     struct proc A <- regs
						|     regs <- proc B
						|     swap( a_kstk , b_kstk )
						| 
						|     return .. ;
						|   } 
						| 
						|   return .. ;
						| }
						|
						|				kstk.pop(b_regs) 
						| 				mode = USER_MODE
						| 				jmp PC 
						|
						|							  ... the rest of the program ... 
+>						| 							  return from main() w/ exit() trap. 
						|							}
						| 
- free memory allocated for the process		| free(new_prog)
- remove process from task list 		| delete(new_prog) 
  	 	      	   			| 
------------------------------------------------+------------------------------------------------------------------------------------------------
						 
Challenges :					 
- ensuring there isn't a malicious process	 
- ensuring efficient sequential time-sharing 	
  	   	     				 
.
