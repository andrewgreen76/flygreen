
HDL impl of ROM+CPU+RAM <- bin.exe (grb<ascii) <- assembler <- .asm
    	    ins ALU mem	   1110111001011011   	  parser       D-1;JGE
	    	regs	   			  
	Let this one do the jumping.
					Who's doing the rd/wr addr.?



It's the programmer who can introduce inanities like '@weight \n D-1;JNE' or '@LOOP \n M=32'
|
IPTR to cur.instr.

======================================================================================================================
BIN PROGRAM INSIDE OF ROM32K : 
======================================================================================================================

variables of var.size -> variable table of ?var.size? -> find avail.mem.addr (?malloc?) -> variable-table


	     	    0->15 taken
	  [ var  | 0010RAMaddr10110 ]
	   weight  0000000000010000
		   @16(ofRAM)
		   Actionable how ? : the AM/ALU-block performs a look-up.


Sym.table :
(var. lookup, alloc. if not there)
weight	  |(populate)|	0000000000010000


ASM:		   	      Expected:  	      	  AM/ALU-block: 
@weight	mpd to RAM	      0000000000010000 		  (A-reg -> addrM)
(Assume all vars have vals before comp.)
M=D	       		      111xxxxxxxxxxxxx		  (ALU -> outM)

======================================================================================================================

labels of var.size -> label table of ?var.size? -> ?LOC/LINE IN .ASM AS DEST FOR IPTR?
- Gen. scenario (label.def, then label.use) :							
  - label.def -> asmr figures out the addr. of the 1st instr. under the label -> label-table	
- Worst-case scenario - forward reference (label-use, then label-def) :       	 		  	     
  - build the LABEL TABLE (1) , 1st pass thru .asm :
    - account for each label.def/subseq. instr. line -> label table (1)
  - 2nd pass : replace every procd label with a bin.val (from table) in the bin.file 


    	high-level table (used by us, not asmr)
	[ label LOOP | numOfLineImpl? ]		// No dual-use of val?
	  	       @4(ofROM)   0...00100 	// PC takes care of that.
		       Actionable how ? : the pre-PC load functionality decides whether to jump or not.


Sym.table :
(after the 1st pass)
LOOP	  |	0000000000001100	// (@12 of ROM) 


ASM:		   	      Expected:  	      	  A/PC business :
(after the 1st pass)
@LOOP	mpd to ROM	      0000000000001100 		  @12 of ROM 
M-D;JEQ	       		      1111xxxxxxxxx010		  ld=1 => PC=A => JUMP -or- ld=0 => PC=/=A => PC++ 

======================================================================================================================

Conclusion :
- the job of the asmr :
  - translating, NOT processing 
  - vars :
    - looking up, allocation (next avail addr (16+) in RAM)
  - labels :
    - 1st pass : searching label.defs, adding to sym.table, designating @#um->bin of instrxns for future PC=A
      - actionable A=01..010 and D=011..101 / M=110..110 within the same cycle (allows for jumping around at runtime) 
    - 2nd pass : looking up, filling in bin instrxn @'s for labels. 
    
.