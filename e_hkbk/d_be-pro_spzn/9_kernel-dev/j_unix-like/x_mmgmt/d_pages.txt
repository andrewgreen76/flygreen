
Segmentation : logical chunks of memory are of various sizes.
Paging	     : logical chunks of (both virtual and physical) memory are all the same size. 

====================================================================================
====================================================================================

Virtual memory		| Physical memory
------------------------+------------------
			|
 pages			| page frames
			| 

====================================================================================
====================================================================================

Anatomy of a page : 
. pages * page size  =  address space size 

    VPN	    	      offset within the page 
    (virt pg no.)
    _ _ ..... _ _    _ _ .................. _ _ 
    2^bits = pages   2^bits = page size



Anatomy of a frame :

    PFN		      offset within the frame 
    (phys fr no.)
    _ _ ..... _ _    _ _ .................. _ _ 

====================================================================================
====================================================================================

Page table :
. a data structure unique to every process
. keeps track of process pages and their corresponding frames in the physical memory
. a page table entry is used for translating from virtual to physical memory 
. the longer a page table entry (PTE) , the larger the page table necessary for
  working with processes
  => page tables can be really space-consuming

Page table entry - anatomy :

32 .. 12   11 .. 9    8 7   6 5 4   3   2   1   0
PFN  	   NIL	      G PAT D A PCD PWT U/S R/W P 

. present bit  	       (P) : 	 is it in RAM or the disk ?
. protection bits      (R/W) 
. user/supervisor bit  (U/S) : 	 can be access by a user process
. reference bit        (A) : 	 has the page been accessed ?
. dirty bit 	       (D) : 	 has the page been changed in the memory ?
|
. 		       (PWT ,
		       PCD ,
		       PAT ,
		       G) : hardware caching methods 
|
. present bit (P) : is it in RAM or the disk ?
  . a.k.a. the valid bit - memory can be legally accessed
  . invalid pages do not get corresponding frames ; this saves huge amounts of physical memory 
  . illegal -> OS trap -> kernel kills the process
. protection bits (R/W) :
  . readable?
  . writable?
  . executable?
  . illegal -> OS trap -> kernel kills the process

====================================================================================
====================================================================================

When a paged process attempts to access memory :
. writing to eax    :  movl <virtual address> , %eax
. reading from eax  :  movl %eax , <virtual address>
. "issuing the load to physical memory" 
. translate the paged virtual address into a physical address using the page table
  . We can observe from countless examples that the offset will not change, but
    the VPN will be translated into PFN. 


  VPN	    Offset
    0 1     0 1 0 1
  | | |
  v v v	    0 1 0 1 

.
