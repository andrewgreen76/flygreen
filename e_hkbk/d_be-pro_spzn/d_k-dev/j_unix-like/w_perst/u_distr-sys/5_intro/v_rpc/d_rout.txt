====================================================================================
RPC PACKAGING - THE METHOD AND THE BASIC ROUTINE : 
====================================================================================


 . CLIENT-SERVER ARCHITECTURE
 . a service is a process (for clients) 


 . client wants to use remote services
 -> sends a request to the server 
 |
 . RPC's ARE NOT PRE-PACKAGED
 -> server accounts for the requested service 
 -> selects and bundles up function definitions of the target process' API for the service 
 |  in a single package as a distinct procedure within the server's memory/storage space
 |
 . the package , loaded with function definitions , still resides on the server side
 |
 . stubs are generated on the server side 
 |   . stub - local code that moves and processes function parameters and return values
 |   . need a stub generator (a.k.a. protocol compiler) 
 |
 -> server takes the list of RPCalls in the package and exports it to the client
 -> client receives it like an API package 
 -> stubs are generated on the client side  
 |  
 -> client combines its own codebase with the stubs into one source code and compiles it into an application
 -> marshaling : 
 |   . a.k.a. serialization 
 |   . RPCall requests are digested into packets prior to transmission
 |
 -> server and client exchange messages
 -> server unmarshals and feeds the function identifier and the parameters
 -> server marshals the results
 -> client unmarshals them 

_
