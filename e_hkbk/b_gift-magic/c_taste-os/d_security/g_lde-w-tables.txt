
Limited direct execution :			| KERNEL			HW			PROGRAM
	       		 			|
================================================+===========================================================================
						|	BOOT TIME 
================================================+===========================================================================
						|
						| init_trap_table()		mem addr of
						|				syscall handlers 
						|
================================================+===========================================================================
						|	BOOT TIME 
================================================+===========================================================================
						|
- adds the program to the process list		| add new_prog
- allocates memory for the program 		| malloc(new_prog)
- loads the program into the memory 		| disk -> code/data bytes -> RAM
| 	    	    	     			| 
- locates the program's entry point 		| > main() 
| - sets us the stack with argc and argv	| push(argc, **argv)
| - clears registers  	   	    		| 
    	   					| 
						| mv regs/PC to kernel-stack
						| trap { return .. }
						| 
						| 				mv kstk -> regs/PC
						| 				mode = USER_MODE
						| 				jmp main()
						| 
- runs the program 	      			| 
+>						| 							run main() {
						| 							  ...
						| 							  issue syscall_trap into OS
						| 							  trap_into_OS();
						| 
						|				mv regs/PC to kstk
						| 				mode = KERNEL_MODE
						| 				jmp trap_handler()
						| 
						| trap {
						|   syscall()
						|   return .. ;
						| }
						|
						|				mv kstk -> regs/PC
						| 				mode = USER_MODE
						| 				jmp PC 
						|
						|							  ... the rest of the program ... 
+>						| 							  return from main() w/ exit() trap. 
						|							}
						| 
- free memory allocated for the process		| free(new_prog)
- remove process from task list 		| remove new_prog 
  	 	      	   			| 
						| 
						| 
Challenges :					| 
- ensuring there isn't a malicious process	| 
- ensuring efficient sequential time-sharing 	| 
  	   	     				| 
.
