
"
Yes, it's possible to design a system where the functionality is implemented purely using digital logic without any software or firmware involved. This approach is commonly referred to as hardware design or digital design.

In such a system, all the necessary functionality, including accessing memory, processing image data, and interfacing with the screen, would be implemented using hardware components such as logic gates, flip-flops, and registers. This approach can be highly efficient and deterministic, making it suitable for real-time applications or situations where low-level control is required.

However, implementing complex functionality purely in hardware can be challenging and may require a deep understanding of digital design principles and hardware description languages (HDLs) such as Verilog or VHDL. Additionally, hardware designs are typically less flexible and harder to modify compared to software-based approaches.

In many cases, a combination of hardware and software (either bare-metal programming or using an operating system) is used to achieve the desired functionality, balancing flexibility, performance, and development complexity.
"



"
No, you don't necessarily need a full-fledged operating system (OS) to project an image stored in memory onto a screen. However, you would need some form of software or firmware running on the board to handle the process of accessing the image data from memory and sending it to the screen. This could be achieved using bare-metal programming or a real-time operating system (RTOS) rather than a full OS.

Bare-metal programming involves directly interacting with the hardware components of the board without the abstraction provided by an OS. With this approach, you can write custom code to access memory, manipulate image data, and interface with the screen hardware.

Alternatively, an RTOS could be used to provide basic scheduling and multitasking capabilities while still allowing for efficient control of hardware peripherals. This can simplify development compared to bare-metal programming while providing more flexibility and efficiency than a full OS.

Ultimately, the specific approach will depend on your requirements, the capabilities of the board, and your preferences as a developer.
"
_
