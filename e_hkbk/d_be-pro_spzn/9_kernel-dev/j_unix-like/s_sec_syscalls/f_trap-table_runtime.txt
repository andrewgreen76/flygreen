
At runtime, when a user process wants to use a syscall, ...
. every syscall is assigned a legitimate syscall number in the trap tables (initd at boot time) 
  . This way having the user process giving the kernel the exact syscall or the address to go to is useless ;
    it must use the syscall.no per the trap tables.  
. the user process must store the syscall.no in the stack or in a register and issue a syscall trap 
. the kernel grabs the number and checks the validity of the syscall.no 
  . if valid, executes the matching code



This use of the trap tables - indirect/"blind" lookup of a syscall - is an implementation of security.
. i.e., the kernel and the hardware play close to the vest 
. This way user processes cannot access parts of the kernel. 

.
