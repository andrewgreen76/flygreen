=========================================================================================================================================================
Essence : 
=========================================================================================================================================================

 . discussing ideation of machines that can make things happen 
 . the study of ...
    . crafting formulas 
    . following formulas
    . what formulas work for us 

=========================================================================================================================================================
Flash cards for the class : 
=========================================================================================================================================================

Theory of computation :
 . study of algorithms and automata 
 => study of determining machines and solutions
 => study of problem-solving machines 
 . Machine's capabilitiy : What can be computed with this machine ? 

Proof by induction :
 . recursive proof (base case and generic/inductive step)
 . You get a formula ? (Arithmetic series formula.) 
 . ex. : sum of first n positive integers
    . 0 is not a positive integer 
    . n=1 => n(n+1)/2 => 1         = 1 = sum of first n=1 positive integers - 1 
    . n=2 => n(n+1)/2 => 3         = 3 = sum of first n=2 positive integers - 1+2
    . n=3 => n(n+1)/2 => 3(2)      = 6 = sum of first n=3 positive integers - 1+2+3
 . PROVE THE BASE CASE 
 . PROVE THE INDUCTIVE CASE 

Computability : 

========================================================
========================================================

Complexity |	regular language	~	dfa/nfa machine			~		regular grammar		~	regular expressions
	   	 . ??? cannot be infinite	 . accepts strings				 . 
						 . no memory (cannot remember strings)
						 . for simple problems with cheap solutions 
						 
	   |	context-free		~	pda (push-down automata)	~		context-free grammar	~	-
	   	 . can have 			 . adding to smth. like a stack			 . more rules 
	   					 . additional memory - stack
						 . one infinite stack
						 => can match characters ( {} )
						 
	   |	context-sensitive	~	lba (linear-BOUNDED automata)			context-sensitive grammar
	     	 . more complex 		 . list-like memory
		   				 . more capabilities with LBA
						 . one infinite list/array			

	   | 	recursive /		~	tm (Turing machine) 				unrestricted grammar 
	        recursively enumerable		 . unlimited memory
			    			 . programmable 

	   v


========================================================
========================================================

Set theory proofs :
 . prove that a is b and b is a

Propositions :
 . implications (p implies q and q implies p) 

========================================================
========================================================

Proof by contradiction : 
_
