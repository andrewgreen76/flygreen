
########################################################################################
########################################################################################
#####				DESIGN CHECKPOINTS:				   #####
########################################################################################
########################################################################################

---------------------------------------- Optional: -------------------------------------
Firmware EEPROM VLSI design :
 |
 . in Logisim 
 . 64-bit (but for 8-bit instructions first)
 |
 . (H)CMOS family
 . FPGA -or- ASIC 
------------------------------------------- OR: ----------------------------------------
 . stick with 8-bit EEPROMs across 4-8 memory banks. 
----------------------------------------------------------------------------------------


========================================================================================
CLOCK-DRIVEN EEPROM PROGRAMMER
========================================================================================

 . modeled after the Ben Eater design
 |
 - no microcontroller (e.g., Arduino Nano) involved
 - no DIP-switches
 + using key switches (instead of hardwiring the medium - breadboard)  
 |
 . EEPROM read-to-board :
 | . need Read mode on (~OE low , ? ~WE high ?)
 | . constantly scrolling address to address , clock dialed to max speed for fast scroll
 |   to virtualize simultaneous read from all addresses 
 |
 . EEPROM write :
 | . need Write mode on (? ~OE high ? , ~WE low) 
 | 
 . automating the program write - ideas :
   . breadboard for holding hardwired machine code (can start off with random binary values) 


========================================================================================
FIRMWARE INSTRUCTIONS : 
========================================================================================

 . compatible with RISC-V
   . instruction count : 47+
   . instructions list :
   . jumps - conditionals 


========================================================================================
CPU:
========================================================================================

 . clock
 |
 -> busses:
 |  . C-bus - for control signals , 32-bit , 	ribbon cable 
 |  . A-bus - for addresses ,	     8-bit ,	bus rails
 |  . D-bus - for data,     	     8-bit , 	bus rails
 |  . I-bus - for instructions ,     8-bit , 	bus rails
 |
 -> PC 	      - program counter
 -> MAR + MDR - memory address register + memory data register
 |
 -> general-purpose registers (GPRs)
 |  . x0 : always holds 0
 |  . x1 - treated as accumulator
 |  . x2 - treated as base register
 |  . x3 - treated as counter register
 |  . x4-x31 - SI , DI , CS , DS , SS , etc. 
 |
 -> ALU 


Microcode ROM :
 |
 . control logic EEPROMs


 . CPU circuit board with all registers, lines, and other components fully functioning


Computer:
 |
 . added BIOS ROM, running BIOS off of ROM
 . built a screen
 . connected the CPU to large ROM, large RAM, and I/O devices: key switches, the screen, and a permanent storage unit
 . expanded computer architecture width to 16 bits 
 . expanded computer architecture width to 32 bits 
 . expanded computer architecture width to 64 bits 

_
