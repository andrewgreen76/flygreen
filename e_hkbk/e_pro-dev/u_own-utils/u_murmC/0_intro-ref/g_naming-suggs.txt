
===================================================================================
SUGGESTION - UNDERSCORE ECONOMY :
===================================================================================

Use '_' (underscore) if it helps. The question is : Will it help others
  without making an overwhelming identifier ? 


===================================================================================
SUGGESTION - UNDERSCORE TO QUICKLY BRING ESSENCE INTO FOCUS :
===================================================================================

You can use '_' to separate the ending noun from the rest of the identifier.


 . [..] spec_thing [..]
 v struct cc_proc {};
 x struct ccproc {};


 . [..] thing_spec [..]
 . void * block_moved = move_block();


===================================================================================
SUGGESTION - KEEP STRUCT TYPE / OBJECT NAMES CLEAR :
===================================================================================

Do not rely on datatypes for understanding identifiers. Identifiers look lost
  in the code that being read , even by you. 

Though datatypes can help with understanding the identifiers , I'd have
  to think that it's still good practice to give clear , descriptive names
  to variables , arrays/pointers , and structures , especially to the eyes
  of someone new to your code. 


Ex. :
  //
  struct ccproc * ccp1;
  //
  x ccp1 = ccp0;
  v ccpr1 = ccpr0;


===================================================================================
===================================================================================
===================================================================================

===================================================================================
Minor suggestion - consistency between related identifiers :
===================================================================================

It is also ideal to have consistency in your identifiers. It would certainly
  make for easier reuse and modification of the code. This applies to underscore
  positioning , the type of case you are using (CamelCase or snake_case) , etc.  


Ex. :
  v struct ccproc * ccpr = ccproc_create();
  x struct cc_proc * ccpr = ccproc_create();


_
