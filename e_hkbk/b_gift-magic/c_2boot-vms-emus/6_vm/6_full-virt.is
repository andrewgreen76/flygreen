
Layer > Independent guest OS

(Layer > Type 1 hypervisor : regulates hardware resources)
(Layer > Hypervisor emulating the hardware) 



Full virtualization is a type of virtualization that allows multiple operating systems (known as guest operating systems) to run concurrently on a single physical host machine. In a full virtualization environment, each guest operating system is completely isolated and unaware that it is running in a virtualized environment.

Key characteristics of full virtualization include:

1. Complete Isolation: Each guest operating system is fully isolated from the host system and other guests. This isolation ensures that the operations of one guest do not affect others.

2. Unmodified Guest OS: In full virtualization, the guest operating systems can run unmodified. They do not require any modifications or adaptations to function within the virtualized environment.

3. Virtual Hardware: The virtualization software creates a set of virtual hardware components for each guest, including virtual CPUs, memory, disk drives, network interfaces, and other devices. These virtual hardware components are then presented to the guest operating systems as if they were running on physical hardware.

4. Hypervisor: Full virtualization is usually achieved through a software layer called a hypervisor or virtual machine monitor (VMM). The hypervisor manages the virtual machines, allocates resources, and ensures proper isolation between guests and the host.

5. Performance Overhead: While full virtualization provides strong isolation and flexibility, it may introduce some performance overhead due to the need for emulating virtual hardware components.

Examples of popular full virtualization solutions include VMware ESXi, Microsoft Hyper-V, and Oracle VirtualBox.

Full virtualization is particularly useful for running different operating systems side by side on the same physical machine. It allows organizations to consolidate their infrastructure, run legacy applications, create isolated testing environments, and improve resource utilization across multiple operating systems.

