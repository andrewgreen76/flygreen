
========================================================================================
THE HISTORY OF ASSEMBLY LANGUAGE FLAVORS : 
========================================================================================

 . 1948 - Manchester Baby 
 . 1949	- Manchester Mark I (Contracted Notation - not mnemonic-based) 
 . 1949 - EDSAC (Initial Orders - mnemonic-based) 
 . 1950 - SEAC 
 . 1951 - UNIVAC I (Short Code) 
 . 1951 - Ferranti Mark 1 (CAM - Contracted Assembly for Manchester University Digital Computer) 
 . 1951 - Whirlwind I 
 . 1952 - IBM 701 ; symbolic assembler (1954) ; N. Rochester
 . 1959 - IBM 7090 (GAS - first modern-style assembler ? ) 

========================================================================================
THE MANCHESTER BABY : 
========================================================================================

"
The Manchester Baby didn't use an assembly language as we commonly understand it today. It was programmed directly using machine language, which involved setting switches and using other low-level methods to input instructions and data. There wasn't a separate symbolic language like assembly used for programming the Manchester Baby. Instead, programmers had to directly manipulate the switches and control the machine's operations manually to execute programs.
"

========================================================================================
EDSAC : 
========================================================================================

 . Initial Orders 

========================================================================================
GAS : 
========================================================================================

 = GNU Assembler
 |
 =/= Generalized Assembly System = Generalized Assembly Language (GAL) 
 |
 . "In the context of Unix-like operating systems, GAS often refers to the GNU Assembler,
    which is part of the GNU Binutils package. It provides support for various instruction
    set architectures (ISAs) and is capable of assembling code for multiple target architectures." 

_
