
========================================================================================
REFLECTING BINARY DATA WITHIN BREADBOARD-BASED VIDEO MEMORY (directly) : 
========================================================================================

	         [   EEPROM  ]
   byte/word  ---[ TT map to ]-->  LED-pixel char output 
    	      	 [           ]


========================================================================================
FONT EEPROM AS A PART OF BIOS : 
========================================================================================

Font :
 . fixedsys
 . 3x15 

It can be : 
 (a) a separate , dedicated EEPROM with a font truth table 
 (b) a truth table encoding as part of the BIOS code on the same chip 


========================================================================================
CAST OF CHARACTERS : 
========================================================================================

... }					
... } 
... } = 15 pixel-LEDs => 15 rails	; 15 * 4 chars = 60 rails (one half of the breadboard) 
... } 	   	      	    		;    * 8 chars = 120 rails (entire breadboard) 
... } 					;  . need 4 bits to show/repr. each of the hexvals (0-F) 
    					;  . need 8 bits (0-255) to reflect the full ASCII chart 

#.# } This is char 'M' => does not look good. 
### } "fixedsys" font supports ASCII chars that are 8x12 (8px wide and 12px tall). 
#.# } Something more economical : 6x6 = 36 LEDs	    | * 4 = 144 LEDs/rails 
#.# }
#.# }


========================================================================================

###
#.#
#.#
#.#
###

..#
..#
..#
..#
..#

###
..#
###
#.. 
###

###
..#
###
..# 
###

#.#
#.#
###
..# 
..#

###
#..
###
..# 
###

###
#..
###
#.# 
###

###
..#
..#
..#
..#

###
#.#
###
#.#
###

###
#.#
###
..#
###

.#.
#.#
###
#.#
#.#

...
##.
.##
#.#
.##

##.
#.#
##.
#.#
##.

#..
##.
#.#
#.#
##.

.##
#..
#..
#..
.##

...
.##
#..
#..
.##

##.
#.#
#.#
#.#
##.

..#
.##
#.#
#.#
.##

###
#..
###
#..
###

...
.#.
#.#
##.
.##

###
#..
###
#..
#..

..#
.#.
###
.#.
.#.

.##
#..
#.#
#.#
.##

...
.#.
#.#
.##
##.

#.#
#.#
###
#.#
#.#

...
#..
##.
#.#
#.#

.#.
.#.
.#.
.#.
.#.

.#.
...
.#.
.#.
.#.

..#
..#
..#
..#
##.

..#
...
..#
..#
##.

#.#
#.#
##.
#.#
#.#

...
#..
#.#
##
#.#

#..
#..
#..
#..
###

.#.
.#.
.#.
.#.
..#

.##	#.#
###	###
#.#	#.#
#.#	#.#
#.#	#.#

....
.##
###
#.#
#.#

..#	#..	##.
.##	##.	#.#
#.#	#.#	#.#
#.#	#.#	#.#
#.#	#.#	#.#

...
##.
#.#
#.#
#.#

.#.
#.#
#.#
#.#
.#.

...
.#.
#.#
#.#
.#.

##.
#.#
##.
#..
#..

...
##.
#.#
##.
#..

.#.	###
#.#	#.#
#.#	#.#
.#.	##.
..#	..#

...	...
.#.	###
#.#	#.#
.#.	##.
..#	..#

##.
#.#
##.
#.#
#.#

...
###
#..
#..
#..

.##
#..
###
..# 
##.

...
.##
##.
.##
##.

###
.#.
.#.
.#.
.#.

.#.
###
.#.
.#.
..#

#.#
#.#
#.#
#.#
.##

...
#.#
#.#
#.#
.##

#.#
#.#
#.#
#.#
.#.

...
#.#
#.#
#.#
.#.

#.#
#.#
#.#
###
#.#

...
#.#
#.#
###
#.#

#.#
#.#
.#.
#.#
#.#

...
#.#
.#.
#.#
#.#

#.#	#.#
#.#	#.#
###	#.#
.#.	.#.
.#.	.#.

...	...
#.#	#.#
###	#.#
..#	.#.
.#.	#..

###
..#
.#.
#.. 
###

...
###
.##
##.
###


========================================================================================
========================================================================================
========================================================================================

	    [	        ]				 [	     ]
bin val  ---[ TT map to ]-->  7seg LED abcdefg scheme  --[ TT map to ]->  LED-pixels 
    	    [           ]	       	   	   	 [           ]

offboard LED array. (Options : LED mon grid -or- 7seg LEDs)
^^^^^
XXXXX }
XXXXX } = 20 LEDs => 20 rails 
XXXXX }
XXXXX }

========================================================================================
[MAKES NO SENSE] SOLUTIONS TO THE LED ARRAY ENGINEERING OVERKILL : 
========================================================================================

(a) we can print all ASCII chars at once
    -or-
(b) we can print once char at a time with every edge of the clock
    -or-
(c) We can peek every framebuffer pixel address , one at a time with every edge of the clock ,
    and reflect its value in its corresponding LED pixel. We are gonna need a faster clock. 

_
