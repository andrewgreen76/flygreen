
===================================================================================
WHY WE WANT A CLOCK WITH COMBINATIONAL LOGIC 
===================================================================================

Problem :
|
Signals within hardware lines tend to be less and less in sync as the circuit grows bigger and bigger. 
 . Think back to Ben Eater's video on pulse triggering using the delay exploit with TTL inverters. This breaks synchronization. 
 . This is an example of a hardware-related side-effect. 
 . Who is to say that this is the only hardware-related side-effect out there ?
 => Purely combinational logic circuits larger than just a few gates are not reliable due to signal instability ,
    delay , and maybe even other factors.


Solutions :
  |
 (a) We could learn about all sorts of hardware phenomena and devise ways of handling them while sticking
     with purely combinational logic. 
 (b) We could just regulate all hardware lines with momentary enable pulses.
    . Crank the clock rate close to persistent enable - you will run into instability.
    . We also don't want our computer to be too slow. 


 
 . without a clock different blocks of hardware will not be on the same page 
 . not stability of signals in hardware
 . not predictability
 . correct sequential execution
 . multiple different states within the same hardware block can get conflated within the same moment 
 . in DRAM - periodic refreshing
 . in synchronous SRAM 

Imagine a machine (e.g., a dumb adder) running on purely combinational logic , no clocking. 

We want to control every aspect data. 
 . its state 
 . its placement 
 . its timing

A clock gives hardware the ability to wait on our wishes. A clocked (waiting) mechanism

The D signal line in a latch is for a data bit. Data isn't random ; data is whatever we want it to be. 
 => We want to 

 (1) DATA ISN'T GOING TO DRIVE ITSELF. We need a driving mechanism.
 (2) We assume data to be organized. doesn't come from nowhere. 

We want to enforce an organized , sequential flow of binary instructions and data from memory to memory. 
 . feedbacking , logic stabilization , and forced delay in a circuit may not always give us that 
 . (we don't want spontaneous analog signal oddities) 
 => NEED A CLOCK - to separate one instruction or piece of data (state 1) from another (state 2)
 . this way we can drive data AS DISCRETE , HARDWARE STATES "CHAINED" TOGETHER
    . hardware states are stored in memory 
    . each hardware block moves from state to state through time
    . from memory to memory 
    . in an organized way 

_
